/*
TESTS for MAVLink protocol implementation for node.js (auto-generated by mavgen_javascript.py)

Generated from: common.xml,minimal.xml

Note: this file has been auto-generated. DO NOT EDIT
*/
var Long = require('long');

var {mavlink20, MAVLink20Processor} = require('./mavlink.js');

// mock mav with sysid-42 and componentid=150
let mav = new MAVLink20Processor(null, 42, 150);

// this uses the above mock by default, but lets us override it before or during tests if desired
let set_mav = function (_mav) {
    // set global mav var from local
    mav = _mav;
};
exports.set_mav = set_mav;

let verbose = 0; // 0 means not verbose, 1 means a bit more, 2 means most verbose
let set_verbose = function (_v) {
    // set global mav var from local
    verbose = _v;
};
exports.set_verbose = set_verbose;

// relevant to how we pass-in the Long object/s to jspack, we'll assume the calling user is smart enough to know that.
var wrap_long = function (someLong) {
    return [someLong.getLowBitsUnsigned(), someLong.getHighBitsUnsigned()];
}


let test_sys_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:sys_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:sys_status          \r'); }
   var test_sys_status = new mavlink20.messages.sys_status(); 
      test_sys_status.onboard_control_sensors_present = 963497464; // fieldtype: uint32_t  isarray: False 
      test_sys_status.onboard_control_sensors_enabled = 963497672; // fieldtype: uint32_t  isarray: False 
      test_sys_status.onboard_control_sensors_health = 963497880; // fieldtype: uint32_t  isarray: False 
      test_sys_status.load = 17859; // fieldtype: uint16_t  isarray: False 
      test_sys_status.voltage_battery = 17963; // fieldtype: uint16_t  isarray: False 
      test_sys_status.current_battery = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_sys_status.drop_rate_comm = 18171; // fieldtype: uint16_t  isarray: False 
      test_sys_status.errors_comm = 18275; // fieldtype: uint16_t  isarray: False 
      test_sys_status.errors_count1 = 18379; // fieldtype: uint16_t  isarray: False 
      test_sys_status.errors_count2 = 18483; // fieldtype: uint16_t  isarray: False 
      test_sys_status.errors_count3 = 18587; // fieldtype: uint16_t  isarray: False 
      test_sys_status.errors_count4 = 18691; // fieldtype: uint16_t  isarray: False 
      test_sys_status.battery_remaining = (new Int8Array([223]))[0]; // fieldtype: int8_t  isarray: False 
      test_sys_status.onboard_control_sensors_present_extended = 963499076; // fieldtype: uint32_t  isarray: False 
      test_sys_status.onboard_control_sensors_enabled_extended = 963499284; // fieldtype: uint32_t  isarray: False 
      test_sys_status.onboard_control_sensors_health_extended = 963499492; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //sys_status
 var t = new Buffer.from(test_sys_status.pack(mav));
   return [test_sys_status,t]; // return an array of unpacked and packed options
};
exports.test_sys_status = test_sys_status; // expose in module

let test_system_time = function () {
   if ( verbose == 2 ) console.log('test creating and packing:system_time'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:system_time          \r'); }
   var test_system_time = new mavlink20.messages.system_time(); 
      test_system_time.time_unix_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_system_time.time_boot_ms = 963497880; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //system_time
 var t = new Buffer.from(test_system_time.pack(mav));
   return [test_system_time,t]; // return an array of unpacked and packed options
};
exports.test_system_time = test_system_time; // expose in module

let test_ping = function () {
   if ( verbose == 2 ) console.log('test creating and packing:ping'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:ping          \r'); }
   var test_ping = new mavlink20.messages.ping(); 
      test_ping.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_ping.seq = 963497880; // fieldtype: uint32_t  isarray: False 
      test_ping.target_system = 41; // fieldtype: uint8_t  isarray: False 
      test_ping.target_component = 108; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //ping
 var t = new Buffer.from(test_ping.pack(mav));
   return [test_ping,t]; // return an array of unpacked and packed options
};
exports.test_ping = test_ping; // expose in module

let test_change_operator_control = function () {
   if ( verbose == 2 ) console.log('test creating and packing:change_operator_control'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:change_operator_control          \r'); }
   var test_change_operator_control = new mavlink20.messages.change_operator_control(); 
      test_change_operator_control.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_change_operator_control.control_request = 72; // fieldtype: uint8_t  isarray: False 
      test_change_operator_control.version = 139; // fieldtype: uint8_t  isarray: False 
      test_change_operator_control.passkey = "DEFGHIJKLMNOPQRSTUVWXYZA"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //change_operator_control
 var t = new Buffer.from(test_change_operator_control.pack(mav));
   return [test_change_operator_control,t]; // return an array of unpacked and packed options
};
exports.test_change_operator_control = test_change_operator_control; // expose in module

let test_change_operator_control_ack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:change_operator_control_ack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:change_operator_control_ack          \r'); }
   var test_change_operator_control_ack = new mavlink20.messages.change_operator_control_ack(); 
      test_change_operator_control_ack.gcs_system_id = 5; // fieldtype: uint8_t  isarray: False 
      test_change_operator_control_ack.control_request = 72; // fieldtype: uint8_t  isarray: False 
      test_change_operator_control_ack.ack = 139; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //change_operator_control_ack
 var t = new Buffer.from(test_change_operator_control_ack.pack(mav));
   return [test_change_operator_control_ack,t]; // return an array of unpacked and packed options
};
exports.test_change_operator_control_ack = test_change_operator_control_ack; // expose in module

let test_auth_key = function () {
   if ( verbose == 2 ) console.log('test creating and packing:auth_key'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:auth_key          \r'); }
   var test_auth_key = new mavlink20.messages.auth_key(); 
      test_auth_key.key = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //auth_key
 var t = new Buffer.from(test_auth_key.pack(mav));
   return [test_auth_key,t]; // return an array of unpacked and packed options
};
exports.test_auth_key = test_auth_key; // expose in module

let test_link_node_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:link_node_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:link_node_status          \r'); }
   var test_link_node_status = new mavlink20.messages.link_node_status(); 
      test_link_node_status.timestamp = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_link_node_status.tx_rate = 963497880; // fieldtype: uint32_t  isarray: False 
      test_link_node_status.rx_rate = 963498088; // fieldtype: uint32_t  isarray: False 
      test_link_node_status.messages_sent = 963498296; // fieldtype: uint32_t  isarray: False 
      test_link_node_status.messages_received = 963498504; // fieldtype: uint32_t  isarray: False 
      test_link_node_status.messages_lost = 963498712; // fieldtype: uint32_t  isarray: False 
      test_link_node_status.rx_parse_err = 18691; // fieldtype: uint16_t  isarray: False 
      test_link_node_status.tx_overflows = 18795; // fieldtype: uint16_t  isarray: False 
      test_link_node_status.rx_overflows = 18899; // fieldtype: uint16_t  isarray: False 
      test_link_node_status.tx_buf = 235; // fieldtype: uint8_t  isarray: False 
      test_link_node_status.rx_buf = 46; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //link_node_status
 var t = new Buffer.from(test_link_node_status.pack(mav));
   return [test_link_node_status,t]; // return an array of unpacked and packed options
};
exports.test_link_node_status = test_link_node_status; // expose in module

let test_set_mode = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_mode'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_mode          \r'); }
   var test_set_mode = new mavlink20.messages.set_mode(); 
      test_set_mode.custom_mode = 963497464; // fieldtype: uint32_t  isarray: False 
      test_set_mode.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_set_mode.base_mode = 84; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //set_mode
 var t = new Buffer.from(test_set_mode.pack(mav));
   return [test_set_mode,t]; // return an array of unpacked and packed options
};
exports.test_set_mode = test_set_mode; // expose in module

let test_param_request_read = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_request_read'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_request_read          \r'); }
   var test_param_request_read = new mavlink20.messages.param_request_read(); 
      test_param_request_read.param_index = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_param_request_read.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_param_request_read.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_param_request_read.param_id = "EFGHIJKLMNOPQRS"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //param_request_read
 var t = new Buffer.from(test_param_request_read.pack(mav));
   return [test_param_request_read,t]; // return an array of unpacked and packed options
};
exports.test_param_request_read = test_param_request_read; // expose in module

let test_param_request_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_request_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_request_list          \r'); }
   var test_param_request_list = new mavlink20.messages.param_request_list(); 
      test_param_request_list.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_param_request_list.target_component = 72; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_request_list
 var t = new Buffer.from(test_param_request_list.pack(mav));
   return [test_param_request_list,t]; // return an array of unpacked and packed options
};
exports.test_param_request_list = test_param_request_list; // expose in module

let test_param_value = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_value'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_value          \r'); }
   var test_param_value = new mavlink20.messages.param_value(); 
      test_param_value.param_value = 17.0; // fieldtype: float  isarray: False 
      test_param_value.param_count = 17443; // fieldtype: uint16_t  isarray: False 
      test_param_value.param_index = 17547; // fieldtype: uint16_t  isarray: False 
      test_param_value.param_id = "IJKLMNOPQRSTUVW"; // fieldtype: char  isarray: False 
      test_param_value.param_type = 77; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_value
 var t = new Buffer.from(test_param_value.pack(mav));
   return [test_param_value,t]; // return an array of unpacked and packed options
};
exports.test_param_value = test_param_value; // expose in module

let test_param_set = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_set'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_set          \r'); }
   var test_param_set = new mavlink20.messages.param_set(); 
      test_param_set.param_value = 17.0; // fieldtype: float  isarray: False 
      test_param_set.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_param_set.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_param_set.param_id = "GHIJKLMNOPQRSTU"; // fieldtype: char  isarray: False 
      test_param_set.param_type = 199; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_set
 var t = new Buffer.from(test_param_set.pack(mav));
   return [test_param_set,t]; // return an array of unpacked and packed options
};
exports.test_param_set = test_param_set; // expose in module

let test_gps_raw_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_raw_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_raw_int          \r'); }
   var test_gps_raw_int = new mavlink20.messages.gps_raw_int(); 
      test_gps_raw_int.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_gps_raw_int.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_raw_int.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_raw_int.alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_raw_int.eph = 18275; // fieldtype: uint16_t  isarray: False 
      test_gps_raw_int.epv = 18379; // fieldtype: uint16_t  isarray: False 
      test_gps_raw_int.vel = 18483; // fieldtype: uint16_t  isarray: False 
      test_gps_raw_int.cog = 18587; // fieldtype: uint16_t  isarray: False 
      test_gps_raw_int.fix_type = 89; // fieldtype: uint8_t  isarray: False 
      test_gps_raw_int.satellites_visible = 156; // fieldtype: uint8_t  isarray: False 
      test_gps_raw_int.alt_ellipsoid = (new Int32Array([963499024]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_raw_int.h_acc = 963499232; // fieldtype: uint32_t  isarray: False 
      test_gps_raw_int.v_acc = 963499440; // fieldtype: uint32_t  isarray: False 
      test_gps_raw_int.vel_acc = 963499648; // fieldtype: uint32_t  isarray: False 
      test_gps_raw_int.hdg_acc = 963499856; // fieldtype: uint32_t  isarray: False 
      test_gps_raw_int.yaw = 19835; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //gps_raw_int
 var t = new Buffer.from(test_gps_raw_int.pack(mav));
   return [test_gps_raw_int,t]; // return an array of unpacked and packed options
};
exports.test_gps_raw_int = test_gps_raw_int; // expose in module

let test_gps_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_status          \r'); }
   var test_gps_status = new mavlink20.messages.gps_status(); 
      test_gps_status.satellites_visible = 5; // fieldtype: uint8_t  isarray: False 
      test_gps_status.satellite_prn = new Buffer.from([72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_gps_status.satellite_used = new Buffer.from([132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_gps_status.satellite_elevation = new Buffer.from([192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_gps_status.satellite_azimuth = new Buffer.from([252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_gps_status.satellite_snr = new Buffer.from([56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //gps_status
 var t = new Buffer.from(test_gps_status.pack(mav));
   return [test_gps_status,t]; // return an array of unpacked and packed options
};
exports.test_gps_status = test_gps_status; // expose in module

let test_scaled_imu = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_imu'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_imu          \r'); }
   var test_scaled_imu = new mavlink20.messages.scaled_imu(); 
      test_scaled_imu.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_imu.xacc = (new Int16Array([17443]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.yacc = (new Int16Array([17547]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.zacc = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.xgyro = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.ygyro = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.zgyro = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.xmag = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.ymag = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.zmag = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu.temperature = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_imu
 var t = new Buffer.from(test_scaled_imu.pack(mav));
   return [test_scaled_imu,t]; // return an array of unpacked and packed options
};
exports.test_scaled_imu = test_scaled_imu; // expose in module

let test_raw_imu = function () {
   if ( verbose == 2 ) console.log('test creating and packing:raw_imu'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:raw_imu          \r'); }
   var test_raw_imu = new mavlink20.messages.raw_imu(); 
      test_raw_imu.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_raw_imu.xacc = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.yacc = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.zacc = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.xgyro = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.ygyro = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.zgyro = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.xmag = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.ymag = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.zmag = (new Int16Array([18483]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_imu.id = 211; // fieldtype: uint8_t  isarray: False 
      test_raw_imu.temperature = (new Int16Array([18639]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //raw_imu
 var t = new Buffer.from(test_raw_imu.pack(mav));
   return [test_raw_imu,t]; // return an array of unpacked and packed options
};
exports.test_raw_imu = test_raw_imu; // expose in module

let test_raw_pressure = function () {
   if ( verbose == 2 ) console.log('test creating and packing:raw_pressure'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:raw_pressure          \r'); }
   var test_raw_pressure = new mavlink20.messages.raw_pressure(); 
      test_raw_pressure.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_raw_pressure.press_abs = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_pressure.press_diff1 = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_pressure.press_diff2 = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_raw_pressure.temperature = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //raw_pressure
 var t = new Buffer.from(test_raw_pressure.pack(mav));
   return [test_raw_pressure,t]; // return an array of unpacked and packed options
};
exports.test_raw_pressure = test_raw_pressure; // expose in module

let test_scaled_pressure = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_pressure'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_pressure          \r'); }
   var test_scaled_pressure = new mavlink20.messages.scaled_pressure(); 
      test_scaled_pressure.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_pressure.press_abs = 45.0; // fieldtype: float  isarray: False 
      test_scaled_pressure.press_diff = 73.0; // fieldtype: float  isarray: False 
      test_scaled_pressure.temperature = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_pressure.temperature_press_diff = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_pressure
 var t = new Buffer.from(test_scaled_pressure.pack(mav));
   return [test_scaled_pressure,t]; // return an array of unpacked and packed options
};
exports.test_scaled_pressure = test_scaled_pressure; // expose in module

let test_attitude = function () {
   if ( verbose == 2 ) console.log('test creating and packing:attitude'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:attitude          \r'); }
   var test_attitude = new mavlink20.messages.attitude(); 
      test_attitude.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_attitude.roll = 45.0; // fieldtype: float  isarray: False 
      test_attitude.pitch = 73.0; // fieldtype: float  isarray: False 
      test_attitude.yaw = 101.0; // fieldtype: float  isarray: False 
      test_attitude.rollspeed = 129.0; // fieldtype: float  isarray: False 
      test_attitude.pitchspeed = 157.0; // fieldtype: float  isarray: False 
      test_attitude.yawspeed = 185.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //attitude
 var t = new Buffer.from(test_attitude.pack(mav));
   return [test_attitude,t]; // return an array of unpacked and packed options
};
exports.test_attitude = test_attitude; // expose in module

let test_attitude_quaternion = function () {
   if ( verbose == 2 ) console.log('test creating and packing:attitude_quaternion'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:attitude_quaternion          \r'); }
   var test_attitude_quaternion = new mavlink20.messages.attitude_quaternion(); 
      test_attitude_quaternion.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_attitude_quaternion.q1 = 45.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.q2 = 73.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.q3 = 101.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.q4 = 129.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.rollspeed = 157.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.pitchspeed = 185.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.yawspeed = 213.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion.repr_offset_q = [241.0, 242.0, 243.0, 244.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //attitude_quaternion
 var t = new Buffer.from(test_attitude_quaternion.pack(mav));
   return [test_attitude_quaternion,t]; // return an array of unpacked and packed options
};
exports.test_attitude_quaternion = test_attitude_quaternion; // expose in module

let test_local_position_ned = function () {
   if ( verbose == 2 ) console.log('test creating and packing:local_position_ned'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:local_position_ned          \r'); }
   var test_local_position_ned = new mavlink20.messages.local_position_ned(); 
      test_local_position_ned.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_local_position_ned.x = 45.0; // fieldtype: float  isarray: False 
      test_local_position_ned.y = 73.0; // fieldtype: float  isarray: False 
      test_local_position_ned.z = 101.0; // fieldtype: float  isarray: False 
      test_local_position_ned.vx = 129.0; // fieldtype: float  isarray: False 
      test_local_position_ned.vy = 157.0; // fieldtype: float  isarray: False 
      test_local_position_ned.vz = 185.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //local_position_ned
 var t = new Buffer.from(test_local_position_ned.pack(mav));
   return [test_local_position_ned,t]; // return an array of unpacked and packed options
};
exports.test_local_position_ned = test_local_position_ned; // expose in module

let test_global_position_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:global_position_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:global_position_int          \r'); }
   var test_global_position_int = new mavlink20.messages.global_position_int(); 
      test_global_position_int.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_global_position_int.lat = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int.lon = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int.alt = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int.relative_alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int.vx = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_global_position_int.vy = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
      test_global_position_int.vz = (new Int16Array([18483]))[0]; // fieldtype: int16_t  isarray: False 
      test_global_position_int.hdg = 18587; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //global_position_int
 var t = new Buffer.from(test_global_position_int.pack(mav));
   return [test_global_position_int,t]; // return an array of unpacked and packed options
};
exports.test_global_position_int = test_global_position_int; // expose in module

let test_rc_channels_scaled = function () {
   if ( verbose == 2 ) console.log('test creating and packing:rc_channels_scaled'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:rc_channels_scaled          \r'); }
   var test_rc_channels_scaled = new mavlink20.messages.rc_channels_scaled(); 
      test_rc_channels_scaled.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_rc_channels_scaled.chan1_scaled = (new Int16Array([17443]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan2_scaled = (new Int16Array([17547]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan3_scaled = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan4_scaled = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan5_scaled = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan6_scaled = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan7_scaled = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.chan8_scaled = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_rc_channels_scaled.port = 65; // fieldtype: uint8_t  isarray: False 
      test_rc_channels_scaled.rssi = 132; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //rc_channels_scaled
 var t = new Buffer.from(test_rc_channels_scaled.pack(mav));
   return [test_rc_channels_scaled,t]; // return an array of unpacked and packed options
};
exports.test_rc_channels_scaled = test_rc_channels_scaled; // expose in module

let test_rc_channels_raw = function () {
   if ( verbose == 2 ) console.log('test creating and packing:rc_channels_raw'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:rc_channels_raw          \r'); }
   var test_rc_channels_raw = new mavlink20.messages.rc_channels_raw(); 
      test_rc_channels_raw.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_rc_channels_raw.chan1_raw = 17443; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan2_raw = 17547; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan3_raw = 17651; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan4_raw = 17755; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan5_raw = 17859; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan6_raw = 17963; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan7_raw = 18067; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.chan8_raw = 18171; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_raw.port = 65; // fieldtype: uint8_t  isarray: False 
      test_rc_channels_raw.rssi = 132; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //rc_channels_raw
 var t = new Buffer.from(test_rc_channels_raw.pack(mav));
   return [test_rc_channels_raw,t]; // return an array of unpacked and packed options
};
exports.test_rc_channels_raw = test_rc_channels_raw; // expose in module

let test_servo_output_raw = function () {
   if ( verbose == 2 ) console.log('test creating and packing:servo_output_raw'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:servo_output_raw          \r'); }
   var test_servo_output_raw = new mavlink20.messages.servo_output_raw(); 
      test_servo_output_raw.time_usec = 963497464; // fieldtype: uint32_t  isarray: False 
      test_servo_output_raw.servo1_raw = 17443; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo2_raw = 17547; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo3_raw = 17651; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo4_raw = 17755; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo5_raw = 17859; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo6_raw = 17963; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo7_raw = 18067; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo8_raw = 18171; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.port = 65; // fieldtype: uint8_t  isarray: False 
      test_servo_output_raw.servo9_raw = 18327; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo10_raw = 18431; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo11_raw = 18535; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo12_raw = 18639; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo13_raw = 18743; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo14_raw = 18847; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo15_raw = 18951; // fieldtype: uint16_t  isarray: False 
      test_servo_output_raw.servo16_raw = 19055; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //servo_output_raw
 var t = new Buffer.from(test_servo_output_raw.pack(mav));
   return [test_servo_output_raw,t]; // return an array of unpacked and packed options
};
exports.test_servo_output_raw = test_servo_output_raw; // expose in module

let test_mission_request_partial_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_request_partial_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_request_partial_list          \r'); }
   var test_mission_request_partial_list = new mavlink20.messages.mission_request_partial_list(); 
      test_mission_request_partial_list.start_index = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_mission_request_partial_list.end_index = (new Int16Array([17339]))[0]; // fieldtype: int16_t  isarray: False 
      test_mission_request_partial_list.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_mission_request_partial_list.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_mission_request_partial_list.mission_type = 151; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_request_partial_list
 var t = new Buffer.from(test_mission_request_partial_list.pack(mav));
   return [test_mission_request_partial_list,t]; // return an array of unpacked and packed options
};
exports.test_mission_request_partial_list = test_mission_request_partial_list; // expose in module

let test_mission_write_partial_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_write_partial_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_write_partial_list          \r'); }
   var test_mission_write_partial_list = new mavlink20.messages.mission_write_partial_list(); 
      test_mission_write_partial_list.start_index = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_mission_write_partial_list.end_index = (new Int16Array([17339]))[0]; // fieldtype: int16_t  isarray: False 
      test_mission_write_partial_list.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_mission_write_partial_list.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_mission_write_partial_list.mission_type = 151; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_write_partial_list
 var t = new Buffer.from(test_mission_write_partial_list.pack(mav));
   return [test_mission_write_partial_list,t]; // return an array of unpacked and packed options
};
exports.test_mission_write_partial_list = test_mission_write_partial_list; // expose in module

let test_mission_item = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_item'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_item          \r'); }
   var test_mission_item = new mavlink20.messages.mission_item(); 
      test_mission_item.param1 = 17.0; // fieldtype: float  isarray: False 
      test_mission_item.param2 = 45.0; // fieldtype: float  isarray: False 
      test_mission_item.param3 = 73.0; // fieldtype: float  isarray: False 
      test_mission_item.param4 = 101.0; // fieldtype: float  isarray: False 
      test_mission_item.x = 129.0; // fieldtype: float  isarray: False 
      test_mission_item.y = 157.0; // fieldtype: float  isarray: False 
      test_mission_item.z = 185.0; // fieldtype: float  isarray: False 
      test_mission_item.seq = 18691; // fieldtype: uint16_t  isarray: False 
      test_mission_item.command = 18795; // fieldtype: uint16_t  isarray: False 
      test_mission_item.target_system = 101; // fieldtype: uint8_t  isarray: False 
      test_mission_item.target_component = 168; // fieldtype: uint8_t  isarray: False 
      test_mission_item.frame = 235; // fieldtype: uint8_t  isarray: False 
      test_mission_item.current = 46; // fieldtype: uint8_t  isarray: False 
      test_mission_item.autocontinue = 113; // fieldtype: uint8_t  isarray: False 
      test_mission_item.mission_type = 180; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_item
 var t = new Buffer.from(test_mission_item.pack(mav));
   return [test_mission_item,t]; // return an array of unpacked and packed options
};
exports.test_mission_item = test_mission_item; // expose in module

let test_mission_request = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_request'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_request          \r'); }
   var test_mission_request = new mavlink20.messages.mission_request(); 
      test_mission_request.seq = 17235; // fieldtype: uint16_t  isarray: False 
      test_mission_request.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_mission_request.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_mission_request.mission_type = 17; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_request
 var t = new Buffer.from(test_mission_request.pack(mav));
   return [test_mission_request,t]; // return an array of unpacked and packed options
};
exports.test_mission_request = test_mission_request; // expose in module

let test_mission_set_current = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_set_current'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_set_current          \r'); }
   var test_mission_set_current = new mavlink20.messages.mission_set_current(); 
      test_mission_set_current.seq = 17235; // fieldtype: uint16_t  isarray: False 
      test_mission_set_current.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_mission_set_current.target_component = 206; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_set_current
 var t = new Buffer.from(test_mission_set_current.pack(mav));
   return [test_mission_set_current,t]; // return an array of unpacked and packed options
};
exports.test_mission_set_current = test_mission_set_current; // expose in module

let test_mission_current = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_current'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_current          \r'); }
   var test_mission_current = new mavlink20.messages.mission_current(); 
      test_mission_current.seq = 17235; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_current
 var t = new Buffer.from(test_mission_current.pack(mav));
   return [test_mission_current,t]; // return an array of unpacked and packed options
};
exports.test_mission_current = test_mission_current; // expose in module

let test_mission_request_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_request_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_request_list          \r'); }
   var test_mission_request_list = new mavlink20.messages.mission_request_list(); 
      test_mission_request_list.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_mission_request_list.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_mission_request_list.mission_type = 139; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_request_list
 var t = new Buffer.from(test_mission_request_list.pack(mav));
   return [test_mission_request_list,t]; // return an array of unpacked and packed options
};
exports.test_mission_request_list = test_mission_request_list; // expose in module

let test_mission_count = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_count'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_count          \r'); }
   var test_mission_count = new mavlink20.messages.mission_count(); 
      test_mission_count.count = 17235; // fieldtype: uint16_t  isarray: False 
      test_mission_count.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_mission_count.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_mission_count.mission_type = 17; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_count
 var t = new Buffer.from(test_mission_count.pack(mav));
   return [test_mission_count,t]; // return an array of unpacked and packed options
};
exports.test_mission_count = test_mission_count; // expose in module

let test_mission_clear_all = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_clear_all'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_clear_all          \r'); }
   var test_mission_clear_all = new mavlink20.messages.mission_clear_all(); 
      test_mission_clear_all.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_mission_clear_all.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_mission_clear_all.mission_type = 139; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_clear_all
 var t = new Buffer.from(test_mission_clear_all.pack(mav));
   return [test_mission_clear_all,t]; // return an array of unpacked and packed options
};
exports.test_mission_clear_all = test_mission_clear_all; // expose in module

let test_mission_item_reached = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_item_reached'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_item_reached          \r'); }
   var test_mission_item_reached = new mavlink20.messages.mission_item_reached(); 
      test_mission_item_reached.seq = 17235; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_item_reached
 var t = new Buffer.from(test_mission_item_reached.pack(mav));
   return [test_mission_item_reached,t]; // return an array of unpacked and packed options
};
exports.test_mission_item_reached = test_mission_item_reached; // expose in module

let test_mission_ack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_ack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_ack          \r'); }
   var test_mission_ack = new mavlink20.messages.mission_ack(); 
      test_mission_ack.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_mission_ack.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_mission_ack.type = 139; // fieldtype: uint8_t  isarray: False 
      test_mission_ack.mission_type = 206; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_ack
 var t = new Buffer.from(test_mission_ack.pack(mav));
   return [test_mission_ack,t]; // return an array of unpacked and packed options
};
exports.test_mission_ack = test_mission_ack; // expose in module

let test_set_gps_global_origin = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_gps_global_origin'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_gps_global_origin          \r'); }
   var test_set_gps_global_origin = new mavlink20.messages.set_gps_global_origin(); 
      test_set_gps_global_origin.latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_gps_global_origin.longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_gps_global_origin.altitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_gps_global_origin.target_system = 41; // fieldtype: uint8_t  isarray: False 
      test_set_gps_global_origin.time_usec = wrap_long(Long.fromString("93372036854776626", true)); // fieldtype: uint64_t  isarray: False 
 //var t = new Buffer.from([])
; //set_gps_global_origin
 var t = new Buffer.from(test_set_gps_global_origin.pack(mav));
   return [test_set_gps_global_origin,t]; // return an array of unpacked and packed options
};
exports.test_set_gps_global_origin = test_set_gps_global_origin; // expose in module

let test_gps_global_origin = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_global_origin'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_global_origin          \r'); }
   var test_gps_global_origin = new mavlink20.messages.gps_global_origin(); 
      test_gps_global_origin.latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_global_origin.longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_global_origin.altitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_global_origin.time_usec = wrap_long(Long.fromString("93372036854776563", true)); // fieldtype: uint64_t  isarray: False 
 //var t = new Buffer.from([])
; //gps_global_origin
 var t = new Buffer.from(test_gps_global_origin.pack(mav));
   return [test_gps_global_origin,t]; // return an array of unpacked and packed options
};
exports.test_gps_global_origin = test_gps_global_origin; // expose in module

let test_param_map_rc = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_map_rc'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_map_rc          \r'); }
   var test_param_map_rc = new mavlink20.messages.param_map_rc(); 
      test_param_map_rc.param_value0 = 17.0; // fieldtype: float  isarray: False 
      test_param_map_rc.scale = 45.0; // fieldtype: float  isarray: False 
      test_param_map_rc.param_value_min = 73.0; // fieldtype: float  isarray: False 
      test_param_map_rc.param_value_max = 101.0; // fieldtype: float  isarray: False 
      test_param_map_rc.param_index = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_param_map_rc.target_system = 187; // fieldtype: uint8_t  isarray: False 
      test_param_map_rc.target_component = 254; // fieldtype: uint8_t  isarray: False 
      test_param_map_rc.param_id = "UVWXYZABCDEFGHI"; // fieldtype: char  isarray: False 
      test_param_map_rc.parameter_rc_channel_index = 113; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_map_rc
 var t = new Buffer.from(test_param_map_rc.pack(mav));
   return [test_param_map_rc,t]; // return an array of unpacked and packed options
};
exports.test_param_map_rc = test_param_map_rc; // expose in module

let test_mission_request_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_request_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_request_int          \r'); }
   var test_mission_request_int = new mavlink20.messages.mission_request_int(); 
      test_mission_request_int.seq = 17235; // fieldtype: uint16_t  isarray: False 
      test_mission_request_int.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_mission_request_int.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_mission_request_int.mission_type = 17; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_request_int
 var t = new Buffer.from(test_mission_request_int.pack(mav));
   return [test_mission_request_int,t]; // return an array of unpacked and packed options
};
exports.test_mission_request_int = test_mission_request_int; // expose in module

let test_safety_set_allowed_area = function () {
   if ( verbose == 2 ) console.log('test creating and packing:safety_set_allowed_area'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:safety_set_allowed_area          \r'); }
   var test_safety_set_allowed_area = new mavlink20.messages.safety_set_allowed_area(); 
      test_safety_set_allowed_area.p1x = 17.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.p1y = 45.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.p1z = 73.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.p2x = 101.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.p2y = 129.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.p2z = 157.0; // fieldtype: float  isarray: False 
      test_safety_set_allowed_area.target_system = 77; // fieldtype: uint8_t  isarray: False 
      test_safety_set_allowed_area.target_component = 144; // fieldtype: uint8_t  isarray: False 
      test_safety_set_allowed_area.frame = 211; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //safety_set_allowed_area
 var t = new Buffer.from(test_safety_set_allowed_area.pack(mav));
   return [test_safety_set_allowed_area,t]; // return an array of unpacked and packed options
};
exports.test_safety_set_allowed_area = test_safety_set_allowed_area; // expose in module

let test_safety_allowed_area = function () {
   if ( verbose == 2 ) console.log('test creating and packing:safety_allowed_area'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:safety_allowed_area          \r'); }
   var test_safety_allowed_area = new mavlink20.messages.safety_allowed_area(); 
      test_safety_allowed_area.p1x = 17.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.p1y = 45.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.p1z = 73.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.p2x = 101.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.p2y = 129.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.p2z = 157.0; // fieldtype: float  isarray: False 
      test_safety_allowed_area.frame = 77; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //safety_allowed_area
 var t = new Buffer.from(test_safety_allowed_area.pack(mav));
   return [test_safety_allowed_area,t]; // return an array of unpacked and packed options
};
exports.test_safety_allowed_area = test_safety_allowed_area; // expose in module

let test_attitude_quaternion_cov = function () {
   if ( verbose == 2 ) console.log('test creating and packing:attitude_quaternion_cov'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:attitude_quaternion_cov          \r'); }
   var test_attitude_quaternion_cov = new mavlink20.messages.attitude_quaternion_cov(); 
      test_attitude_quaternion_cov.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_attitude_quaternion_cov.q = [73.0, 74.0, 75.0, 76.0]; // fieldtype: float  isarray: True 
      test_attitude_quaternion_cov.rollspeed = 185.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion_cov.pitchspeed = 213.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion_cov.yawspeed = 241.0; // fieldtype: float  isarray: False 
      test_attitude_quaternion_cov.covariance = [269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //attitude_quaternion_cov
 var t = new Buffer.from(test_attitude_quaternion_cov.pack(mav));
   return [test_attitude_quaternion_cov,t]; // return an array of unpacked and packed options
};
exports.test_attitude_quaternion_cov = test_attitude_quaternion_cov; // expose in module

let test_nav_controller_output = function () {
   if ( verbose == 2 ) console.log('test creating and packing:nav_controller_output'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:nav_controller_output          \r'); }
   var test_nav_controller_output = new mavlink20.messages.nav_controller_output(); 
      test_nav_controller_output.nav_roll = 17.0; // fieldtype: float  isarray: False 
      test_nav_controller_output.nav_pitch = 45.0; // fieldtype: float  isarray: False 
      test_nav_controller_output.alt_error = 73.0; // fieldtype: float  isarray: False 
      test_nav_controller_output.aspd_error = 101.0; // fieldtype: float  isarray: False 
      test_nav_controller_output.xtrack_error = 129.0; // fieldtype: float  isarray: False 
      test_nav_controller_output.nav_bearing = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_nav_controller_output.target_bearing = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
      test_nav_controller_output.wp_dist = 18483; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //nav_controller_output
 var t = new Buffer.from(test_nav_controller_output.pack(mav));
   return [test_nav_controller_output,t]; // return an array of unpacked and packed options
};
exports.test_nav_controller_output = test_nav_controller_output; // expose in module

let test_global_position_int_cov = function () {
   if ( verbose == 2 ) console.log('test creating and packing:global_position_int_cov'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:global_position_int_cov          \r'); }
   var test_global_position_int_cov = new mavlink20.messages.global_position_int_cov(); 
      test_global_position_int_cov.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_global_position_int_cov.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int_cov.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int_cov.alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int_cov.relative_alt = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_global_position_int_cov.vx = 185.0; // fieldtype: float  isarray: False 
      test_global_position_int_cov.vy = 213.0; // fieldtype: float  isarray: False 
      test_global_position_int_cov.vz = 241.0; // fieldtype: float  isarray: False 
      test_global_position_int_cov.covariance = [269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 285.0, 286.0, 287.0, 288.0, 289.0, 290.0, 291.0, 292.0, 293.0, 294.0, 295.0, 296.0, 297.0, 298.0, 299.0, 300.0, 301.0, 302.0, 303.0, 304.0]; // fieldtype: float  isarray: True 
      test_global_position_int_cov.estimator_type = 33; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //global_position_int_cov
 var t = new Buffer.from(test_global_position_int_cov.pack(mav));
   return [test_global_position_int_cov,t]; // return an array of unpacked and packed options
};
exports.test_global_position_int_cov = test_global_position_int_cov; // expose in module

let test_local_position_ned_cov = function () {
   if ( verbose == 2 ) console.log('test creating and packing:local_position_ned_cov'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:local_position_ned_cov          \r'); }
   var test_local_position_ned_cov = new mavlink20.messages.local_position_ned_cov(); 
      test_local_position_ned_cov.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_local_position_ned_cov.x = 73.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.y = 101.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.z = 129.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.vx = 157.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.vy = 185.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.vz = 213.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.ax = 241.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.ay = 269.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.az = 297.0; // fieldtype: float  isarray: False 
      test_local_position_ned_cov.covariance = [325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0, 333.0, 334.0, 335.0, 336.0, 337.0, 338.0, 339.0, 340.0, 341.0, 342.0, 343.0, 344.0, 345.0, 346.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0, 354.0, 355.0, 356.0, 357.0, 358.0, 359.0, 360.0, 361.0, 362.0, 363.0, 364.0, 365.0, 366.0, 367.0, 368.0, 369.0]; // fieldtype: float  isarray: True 
      test_local_position_ned_cov.estimator_type = 165; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //local_position_ned_cov
 var t = new Buffer.from(test_local_position_ned_cov.pack(mav));
   return [test_local_position_ned_cov,t]; // return an array of unpacked and packed options
};
exports.test_local_position_ned_cov = test_local_position_ned_cov; // expose in module

let test_rc_channels = function () {
   if ( verbose == 2 ) console.log('test creating and packing:rc_channels'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:rc_channels          \r'); }
   var test_rc_channels = new mavlink20.messages.rc_channels(); 
      test_rc_channels.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_rc_channels.chan1_raw = 17443; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan2_raw = 17547; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan3_raw = 17651; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan4_raw = 17755; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan5_raw = 17859; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan6_raw = 17963; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan7_raw = 18067; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan8_raw = 18171; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan9_raw = 18275; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan10_raw = 18379; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan11_raw = 18483; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan12_raw = 18587; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan13_raw = 18691; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan14_raw = 18795; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan15_raw = 18899; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan16_raw = 19003; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan17_raw = 19107; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chan18_raw = 19211; // fieldtype: uint16_t  isarray: False 
      test_rc_channels.chancount = 125; // fieldtype: uint8_t  isarray: False 
      test_rc_channels.rssi = 192; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //rc_channels
 var t = new Buffer.from(test_rc_channels.pack(mav));
   return [test_rc_channels,t]; // return an array of unpacked and packed options
};
exports.test_rc_channels = test_rc_channels; // expose in module

let test_request_data_stream = function () {
   if ( verbose == 2 ) console.log('test creating and packing:request_data_stream'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:request_data_stream          \r'); }
   var test_request_data_stream = new mavlink20.messages.request_data_stream(); 
      test_request_data_stream.req_message_rate = 17235; // fieldtype: uint16_t  isarray: False 
      test_request_data_stream.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_request_data_stream.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_request_data_stream.req_stream_id = 17; // fieldtype: uint8_t  isarray: False 
      test_request_data_stream.start_stop = 84; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //request_data_stream
 var t = new Buffer.from(test_request_data_stream.pack(mav));
   return [test_request_data_stream,t]; // return an array of unpacked and packed options
};
exports.test_request_data_stream = test_request_data_stream; // expose in module

let test_data_stream = function () {
   if ( verbose == 2 ) console.log('test creating and packing:data_stream'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:data_stream          \r'); }
   var test_data_stream = new mavlink20.messages.data_stream(); 
      test_data_stream.message_rate = 17235; // fieldtype: uint16_t  isarray: False 
      test_data_stream.stream_id = 139; // fieldtype: uint8_t  isarray: False 
      test_data_stream.on_off = 206; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //data_stream
 var t = new Buffer.from(test_data_stream.pack(mav));
   return [test_data_stream,t]; // return an array of unpacked and packed options
};
exports.test_data_stream = test_data_stream; // expose in module

let test_manual_control = function () {
   if ( verbose == 2 ) console.log('test creating and packing:manual_control'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:manual_control          \r'); }
   var test_manual_control = new mavlink20.messages.manual_control(); 
      test_manual_control.x = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_manual_control.y = (new Int16Array([17339]))[0]; // fieldtype: int16_t  isarray: False 
      test_manual_control.z = (new Int16Array([17443]))[0]; // fieldtype: int16_t  isarray: False 
      test_manual_control.r = (new Int16Array([17547]))[0]; // fieldtype: int16_t  isarray: False 
      test_manual_control.buttons = 17651; // fieldtype: uint16_t  isarray: False 
      test_manual_control.target = 163; // fieldtype: uint8_t  isarray: False 
      test_manual_control.buttons2 = 17807; // fieldtype: uint16_t  isarray: False 
      test_manual_control.enabled_extensions = 108; // fieldtype: uint8_t  isarray: False 
      test_manual_control.s = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_manual_control.t = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //manual_control
 var t = new Buffer.from(test_manual_control.pack(mav));
   return [test_manual_control,t]; // return an array of unpacked and packed options
};
exports.test_manual_control = test_manual_control; // expose in module

let test_rc_channels_override = function () {
   if ( verbose == 2 ) console.log('test creating and packing:rc_channels_override'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:rc_channels_override          \r'); }
   var test_rc_channels_override = new mavlink20.messages.rc_channels_override(); 
      test_rc_channels_override.chan1_raw = 17235; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan2_raw = 17339; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan3_raw = 17443; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan4_raw = 17547; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan5_raw = 17651; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan6_raw = 17755; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan7_raw = 17859; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan8_raw = 17963; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.target_system = 53; // fieldtype: uint8_t  isarray: False 
      test_rc_channels_override.target_component = 120; // fieldtype: uint8_t  isarray: False 
      test_rc_channels_override.chan9_raw = 18171; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan10_raw = 18275; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan11_raw = 18379; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan12_raw = 18483; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan13_raw = 18587; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan14_raw = 18691; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan15_raw = 18795; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan16_raw = 18899; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan17_raw = 19003; // fieldtype: uint16_t  isarray: False 
      test_rc_channels_override.chan18_raw = 19107; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //rc_channels_override
 var t = new Buffer.from(test_rc_channels_override.pack(mav));
   return [test_rc_channels_override,t]; // return an array of unpacked and packed options
};
exports.test_rc_channels_override = test_rc_channels_override; // expose in module

let test_mission_item_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mission_item_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mission_item_int          \r'); }
   var test_mission_item_int = new mavlink20.messages.mission_item_int(); 
      test_mission_item_int.param1 = 17.0; // fieldtype: float  isarray: False 
      test_mission_item_int.param2 = 45.0; // fieldtype: float  isarray: False 
      test_mission_item_int.param3 = 73.0; // fieldtype: float  isarray: False 
      test_mission_item_int.param4 = 101.0; // fieldtype: float  isarray: False 
      test_mission_item_int.x = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_mission_item_int.y = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_mission_item_int.z = 185.0; // fieldtype: float  isarray: False 
      test_mission_item_int.seq = 18691; // fieldtype: uint16_t  isarray: False 
      test_mission_item_int.command = 18795; // fieldtype: uint16_t  isarray: False 
      test_mission_item_int.target_system = 101; // fieldtype: uint8_t  isarray: False 
      test_mission_item_int.target_component = 168; // fieldtype: uint8_t  isarray: False 
      test_mission_item_int.frame = 235; // fieldtype: uint8_t  isarray: False 
      test_mission_item_int.current = 46; // fieldtype: uint8_t  isarray: False 
      test_mission_item_int.autocontinue = 113; // fieldtype: uint8_t  isarray: False 
      test_mission_item_int.mission_type = 180; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //mission_item_int
 var t = new Buffer.from(test_mission_item_int.pack(mav));
   return [test_mission_item_int,t]; // return an array of unpacked and packed options
};
exports.test_mission_item_int = test_mission_item_int; // expose in module

let test_vfr_hud = function () {
   if ( verbose == 2 ) console.log('test creating and packing:vfr_hud'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:vfr_hud          \r'); }
   var test_vfr_hud = new mavlink20.messages.vfr_hud(); 
      test_vfr_hud.airspeed = 17.0; // fieldtype: float  isarray: False 
      test_vfr_hud.groundspeed = 45.0; // fieldtype: float  isarray: False 
      test_vfr_hud.alt = 73.0; // fieldtype: float  isarray: False 
      test_vfr_hud.climb = 101.0; // fieldtype: float  isarray: False 
      test_vfr_hud.heading = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_vfr_hud.throttle = 18171; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //vfr_hud
 var t = new Buffer.from(test_vfr_hud.pack(mav));
   return [test_vfr_hud,t]; // return an array of unpacked and packed options
};
exports.test_vfr_hud = test_vfr_hud; // expose in module

let test_command_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:command_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:command_int          \r'); }
   var test_command_int = new mavlink20.messages.command_int(); 
      test_command_int.param1 = 17.0; // fieldtype: float  isarray: False 
      test_command_int.param2 = 45.0; // fieldtype: float  isarray: False 
      test_command_int.param3 = 73.0; // fieldtype: float  isarray: False 
      test_command_int.param4 = 101.0; // fieldtype: float  isarray: False 
      test_command_int.x = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_command_int.y = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_command_int.z = 185.0; // fieldtype: float  isarray: False 
      test_command_int.command = 18691; // fieldtype: uint16_t  isarray: False 
      test_command_int.target_system = 223; // fieldtype: uint8_t  isarray: False 
      test_command_int.target_component = 34; // fieldtype: uint8_t  isarray: False 
      test_command_int.frame = 101; // fieldtype: uint8_t  isarray: False 
      test_command_int.current = 168; // fieldtype: uint8_t  isarray: False 
      test_command_int.autocontinue = 235; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //command_int
 var t = new Buffer.from(test_command_int.pack(mav));
   return [test_command_int,t]; // return an array of unpacked and packed options
};
exports.test_command_int = test_command_int; // expose in module

let test_command_long = function () {
   if ( verbose == 2 ) console.log('test creating and packing:command_long'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:command_long          \r'); }
   var test_command_long = new mavlink20.messages.command_long(); 
      test_command_long.param1 = 17.0; // fieldtype: float  isarray: False 
      test_command_long.param2 = 45.0; // fieldtype: float  isarray: False 
      test_command_long.param3 = 73.0; // fieldtype: float  isarray: False 
      test_command_long.param4 = 101.0; // fieldtype: float  isarray: False 
      test_command_long.param5 = 129.0; // fieldtype: float  isarray: False 
      test_command_long.param6 = 157.0; // fieldtype: float  isarray: False 
      test_command_long.param7 = 185.0; // fieldtype: float  isarray: False 
      test_command_long.command = 18691; // fieldtype: uint16_t  isarray: False 
      test_command_long.target_system = 223; // fieldtype: uint8_t  isarray: False 
      test_command_long.target_component = 34; // fieldtype: uint8_t  isarray: False 
      test_command_long.confirmation = 101; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //command_long
 var t = new Buffer.from(test_command_long.pack(mav));
   return [test_command_long,t]; // return an array of unpacked and packed options
};
exports.test_command_long = test_command_long; // expose in module

let test_command_ack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:command_ack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:command_ack          \r'); }
   var test_command_ack = new mavlink20.messages.command_ack(); 
      test_command_ack.command = 17235; // fieldtype: uint16_t  isarray: False 
      test_command_ack.result = 139; // fieldtype: uint8_t  isarray: False 
      test_command_ack.progress = 206; // fieldtype: uint8_t  isarray: False 
      test_command_ack.result_param2 = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_command_ack.target_system = 29; // fieldtype: uint8_t  isarray: False 
      test_command_ack.target_component = 96; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //command_ack
 var t = new Buffer.from(test_command_ack.pack(mav));
   return [test_command_ack,t]; // return an array of unpacked and packed options
};
exports.test_command_ack = test_command_ack; // expose in module

let test_command_cancel = function () {
   if ( verbose == 2 ) console.log('test creating and packing:command_cancel'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:command_cancel          \r'); }
   var test_command_cancel = new mavlink20.messages.command_cancel(); 
      test_command_cancel.command = 17235; // fieldtype: uint16_t  isarray: False 
      test_command_cancel.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_command_cancel.target_component = 206; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //command_cancel
 var t = new Buffer.from(test_command_cancel.pack(mav));
   return [test_command_cancel,t]; // return an array of unpacked and packed options
};
exports.test_command_cancel = test_command_cancel; // expose in module

let test_manual_setpoint = function () {
   if ( verbose == 2 ) console.log('test creating and packing:manual_setpoint'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:manual_setpoint          \r'); }
   var test_manual_setpoint = new mavlink20.messages.manual_setpoint(); 
      test_manual_setpoint.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_manual_setpoint.roll = 45.0; // fieldtype: float  isarray: False 
      test_manual_setpoint.pitch = 73.0; // fieldtype: float  isarray: False 
      test_manual_setpoint.yaw = 101.0; // fieldtype: float  isarray: False 
      test_manual_setpoint.thrust = 129.0; // fieldtype: float  isarray: False 
      test_manual_setpoint.mode_switch = 65; // fieldtype: uint8_t  isarray: False 
      test_manual_setpoint.manual_override_switch = 132; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //manual_setpoint
 var t = new Buffer.from(test_manual_setpoint.pack(mav));
   return [test_manual_setpoint,t]; // return an array of unpacked and packed options
};
exports.test_manual_setpoint = test_manual_setpoint; // expose in module

let test_set_attitude_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_attitude_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_attitude_target          \r'); }
   var test_set_attitude_target = new mavlink20.messages.set_attitude_target(); 
      test_set_attitude_target.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_set_attitude_target.q = [45.0, 46.0, 47.0, 48.0]; // fieldtype: float  isarray: True 
      test_set_attitude_target.body_roll_rate = 157.0; // fieldtype: float  isarray: False 
      test_set_attitude_target.body_pitch_rate = 185.0; // fieldtype: float  isarray: False 
      test_set_attitude_target.body_yaw_rate = 213.0; // fieldtype: float  isarray: False 
      test_set_attitude_target.thrust = 241.0; // fieldtype: float  isarray: False 
      test_set_attitude_target.target_system = 113; // fieldtype: uint8_t  isarray: False 
      test_set_attitude_target.target_component = 180; // fieldtype: uint8_t  isarray: False 
      test_set_attitude_target.type_mask = 247; // fieldtype: uint8_t  isarray: False 
      test_set_attitude_target.thrust_body = [290.0, 291.0, 292.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //set_attitude_target
 var t = new Buffer.from(test_set_attitude_target.pack(mav));
   return [test_set_attitude_target,t]; // return an array of unpacked and packed options
};
exports.test_set_attitude_target = test_set_attitude_target; // expose in module

let test_attitude_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:attitude_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:attitude_target          \r'); }
   var test_attitude_target = new mavlink20.messages.attitude_target(); 
      test_attitude_target.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_attitude_target.q = [45.0, 46.0, 47.0, 48.0]; // fieldtype: float  isarray: True 
      test_attitude_target.body_roll_rate = 157.0; // fieldtype: float  isarray: False 
      test_attitude_target.body_pitch_rate = 185.0; // fieldtype: float  isarray: False 
      test_attitude_target.body_yaw_rate = 213.0; // fieldtype: float  isarray: False 
      test_attitude_target.thrust = 241.0; // fieldtype: float  isarray: False 
      test_attitude_target.type_mask = 113; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //attitude_target
 var t = new Buffer.from(test_attitude_target.pack(mav));
   return [test_attitude_target,t]; // return an array of unpacked and packed options
};
exports.test_attitude_target = test_attitude_target; // expose in module

let test_set_position_target_local_ned = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_position_target_local_ned'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_position_target_local_ned          \r'); }
   var test_set_position_target_local_ned = new mavlink20.messages.set_position_target_local_ned(); 
      test_set_position_target_local_ned.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_set_position_target_local_ned.x = 45.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.y = 73.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.z = 101.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.vx = 129.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.vy = 157.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.vz = 185.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.afx = 213.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.afy = 241.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.afz = 269.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.yaw = 297.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.yaw_rate = 325.0; // fieldtype: float  isarray: False 
      test_set_position_target_local_ned.type_mask = 19731; // fieldtype: uint16_t  isarray: False 
      test_set_position_target_local_ned.target_system = 27; // fieldtype: uint8_t  isarray: False 
      test_set_position_target_local_ned.target_component = 94; // fieldtype: uint8_t  isarray: False 
      test_set_position_target_local_ned.coordinate_frame = 161; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //set_position_target_local_ned
 var t = new Buffer.from(test_set_position_target_local_ned.pack(mav));
   return [test_set_position_target_local_ned,t]; // return an array of unpacked and packed options
};
exports.test_set_position_target_local_ned = test_set_position_target_local_ned; // expose in module

let test_position_target_local_ned = function () {
   if ( verbose == 2 ) console.log('test creating and packing:position_target_local_ned'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:position_target_local_ned          \r'); }
   var test_position_target_local_ned = new mavlink20.messages.position_target_local_ned(); 
      test_position_target_local_ned.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_position_target_local_ned.x = 45.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.y = 73.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.z = 101.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.vx = 129.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.vy = 157.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.vz = 185.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.afx = 213.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.afy = 241.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.afz = 269.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.yaw = 297.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.yaw_rate = 325.0; // fieldtype: float  isarray: False 
      test_position_target_local_ned.type_mask = 19731; // fieldtype: uint16_t  isarray: False 
      test_position_target_local_ned.coordinate_frame = 27; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //position_target_local_ned
 var t = new Buffer.from(test_position_target_local_ned.pack(mav));
   return [test_position_target_local_ned,t]; // return an array of unpacked and packed options
};
exports.test_position_target_local_ned = test_position_target_local_ned; // expose in module

let test_set_position_target_global_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_position_target_global_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_position_target_global_int          \r'); }
   var test_set_position_target_global_int = new mavlink20.messages.set_position_target_global_int(); 
      test_set_position_target_global_int.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_set_position_target_global_int.lat_int = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_position_target_global_int.lon_int = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_position_target_global_int.alt = 101.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.vx = 129.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.vy = 157.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.vz = 185.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.afx = 213.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.afy = 241.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.afz = 269.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.yaw = 297.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.yaw_rate = 325.0; // fieldtype: float  isarray: False 
      test_set_position_target_global_int.type_mask = 19731; // fieldtype: uint16_t  isarray: False 
      test_set_position_target_global_int.target_system = 27; // fieldtype: uint8_t  isarray: False 
      test_set_position_target_global_int.target_component = 94; // fieldtype: uint8_t  isarray: False 
      test_set_position_target_global_int.coordinate_frame = 161; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //set_position_target_global_int
 var t = new Buffer.from(test_set_position_target_global_int.pack(mav));
   return [test_set_position_target_global_int,t]; // return an array of unpacked and packed options
};
exports.test_set_position_target_global_int = test_set_position_target_global_int; // expose in module

let test_position_target_global_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:position_target_global_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:position_target_global_int          \r'); }
   var test_position_target_global_int = new mavlink20.messages.position_target_global_int(); 
      test_position_target_global_int.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_position_target_global_int.lat_int = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_position_target_global_int.lon_int = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_position_target_global_int.alt = 101.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.vx = 129.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.vy = 157.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.vz = 185.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.afx = 213.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.afy = 241.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.afz = 269.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.yaw = 297.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.yaw_rate = 325.0; // fieldtype: float  isarray: False 
      test_position_target_global_int.type_mask = 19731; // fieldtype: uint16_t  isarray: False 
      test_position_target_global_int.coordinate_frame = 27; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //position_target_global_int
 var t = new Buffer.from(test_position_target_global_int.pack(mav));
   return [test_position_target_global_int,t]; // return an array of unpacked and packed options
};
exports.test_position_target_global_int = test_position_target_global_int; // expose in module

let test_local_position_ned_system_global_offset = function () {
   if ( verbose == 2 ) console.log('test creating and packing:local_position_ned_system_global_offset'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:local_position_ned_system_global_offset          \r'); }
   var test_local_position_ned_system_global_offset = new mavlink20.messages.local_position_ned_system_global_offset(); 
      test_local_position_ned_system_global_offset.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_local_position_ned_system_global_offset.x = 45.0; // fieldtype: float  isarray: False 
      test_local_position_ned_system_global_offset.y = 73.0; // fieldtype: float  isarray: False 
      test_local_position_ned_system_global_offset.z = 101.0; // fieldtype: float  isarray: False 
      test_local_position_ned_system_global_offset.roll = 129.0; // fieldtype: float  isarray: False 
      test_local_position_ned_system_global_offset.pitch = 157.0; // fieldtype: float  isarray: False 
      test_local_position_ned_system_global_offset.yaw = 185.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //local_position_ned_system_global_offset
 var t = new Buffer.from(test_local_position_ned_system_global_offset.pack(mav));
   return [test_local_position_ned_system_global_offset,t]; // return an array of unpacked and packed options
};
exports.test_local_position_ned_system_global_offset = test_local_position_ned_system_global_offset; // expose in module

let test_hil_state = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_state'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_state          \r'); }
   var test_hil_state = new mavlink20.messages.hil_state(); 
      test_hil_state.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_state.roll = 73.0; // fieldtype: float  isarray: False 
      test_hil_state.pitch = 101.0; // fieldtype: float  isarray: False 
      test_hil_state.yaw = 129.0; // fieldtype: float  isarray: False 
      test_hil_state.rollspeed = 157.0; // fieldtype: float  isarray: False 
      test_hil_state.pitchspeed = 185.0; // fieldtype: float  isarray: False 
      test_hil_state.yawspeed = 213.0; // fieldtype: float  isarray: False 
      test_hil_state.lat = (new Int32Array([963499128]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state.lon = (new Int32Array([963499336]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state.alt = (new Int32Array([963499544]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state.vx = (new Int16Array([19523]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state.vy = (new Int16Array([19627]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state.vz = (new Int16Array([19731]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state.xacc = (new Int16Array([19835]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state.yacc = (new Int16Array([19939]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state.zacc = (new Int16Array([20043]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_state
 var t = new Buffer.from(test_hil_state.pack(mav));
   return [test_hil_state,t]; // return an array of unpacked and packed options
};
exports.test_hil_state = test_hil_state; // expose in module

let test_hil_controls = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_controls'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_controls          \r'); }
   var test_hil_controls = new mavlink20.messages.hil_controls(); 
      test_hil_controls.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_controls.roll_ailerons = 73.0; // fieldtype: float  isarray: False 
      test_hil_controls.pitch_elevator = 101.0; // fieldtype: float  isarray: False 
      test_hil_controls.yaw_rudder = 129.0; // fieldtype: float  isarray: False 
      test_hil_controls.throttle = 157.0; // fieldtype: float  isarray: False 
      test_hil_controls.aux1 = 185.0; // fieldtype: float  isarray: False 
      test_hil_controls.aux2 = 213.0; // fieldtype: float  isarray: False 
      test_hil_controls.aux3 = 241.0; // fieldtype: float  isarray: False 
      test_hil_controls.aux4 = 269.0; // fieldtype: float  isarray: False 
      test_hil_controls.mode = 125; // fieldtype: uint8_t  isarray: False 
      test_hil_controls.nav_mode = 192; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_controls
 var t = new Buffer.from(test_hil_controls.pack(mav));
   return [test_hil_controls,t]; // return an array of unpacked and packed options
};
exports.test_hil_controls = test_hil_controls; // expose in module

let test_hil_rc_inputs_raw = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_rc_inputs_raw'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_rc_inputs_raw          \r'); }
   var test_hil_rc_inputs_raw = new mavlink20.messages.hil_rc_inputs_raw(); 
      test_hil_rc_inputs_raw.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_rc_inputs_raw.chan1_raw = 17651; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan2_raw = 17755; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan3_raw = 17859; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan4_raw = 17963; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan5_raw = 18067; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan6_raw = 18171; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan7_raw = 18275; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan8_raw = 18379; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan9_raw = 18483; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan10_raw = 18587; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan11_raw = 18691; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.chan12_raw = 18795; // fieldtype: uint16_t  isarray: False 
      test_hil_rc_inputs_raw.rssi = 101; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_rc_inputs_raw
 var t = new Buffer.from(test_hil_rc_inputs_raw.pack(mav));
   return [test_hil_rc_inputs_raw,t]; // return an array of unpacked and packed options
};
exports.test_hil_rc_inputs_raw = test_hil_rc_inputs_raw; // expose in module

let test_hil_actuator_controls = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_actuator_controls'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_actuator_controls          \r'); }
   var test_hil_actuator_controls = new mavlink20.messages.hil_actuator_controls(); 
      test_hil_actuator_controls.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_actuator_controls.flags = wrap_long(Long.fromString("93372036854776311", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_actuator_controls.controls = [129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0, 137.0, 138.0, 139.0, 140.0, 141.0, 142.0, 143.0, 144.0]; // fieldtype: float  isarray: True 
      test_hil_actuator_controls.mode = 245; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_actuator_controls
 var t = new Buffer.from(test_hil_actuator_controls.pack(mav));
   return [test_hil_actuator_controls,t]; // return an array of unpacked and packed options
};
exports.test_hil_actuator_controls = test_hil_actuator_controls; // expose in module

let test_optical_flow = function () {
   if ( verbose == 2 ) console.log('test creating and packing:optical_flow'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:optical_flow          \r'); }
   var test_optical_flow = new mavlink20.messages.optical_flow(); 
      test_optical_flow.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_optical_flow.flow_comp_m_x = 73.0; // fieldtype: float  isarray: False 
      test_optical_flow.flow_comp_m_y = 101.0; // fieldtype: float  isarray: False 
      test_optical_flow.ground_distance = 129.0; // fieldtype: float  isarray: False 
      test_optical_flow.flow_x = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_optical_flow.flow_y = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
      test_optical_flow.sensor_id = 77; // fieldtype: uint8_t  isarray: False 
      test_optical_flow.quality = 144; // fieldtype: uint8_t  isarray: False 
      test_optical_flow.flow_rate_x = 199.0; // fieldtype: float  isarray: False 
      test_optical_flow.flow_rate_y = 227.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //optical_flow
 var t = new Buffer.from(test_optical_flow.pack(mav));
   return [test_optical_flow,t]; // return an array of unpacked and packed options
};
exports.test_optical_flow = test_optical_flow; // expose in module

let test_global_vision_position_estimate = function () {
   if ( verbose == 2 ) console.log('test creating and packing:global_vision_position_estimate'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:global_vision_position_estimate          \r'); }
   var test_global_vision_position_estimate = new mavlink20.messages.global_vision_position_estimate(); 
      test_global_vision_position_estimate.usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_global_vision_position_estimate.x = 73.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.y = 101.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.z = 129.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.roll = 157.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.pitch = 185.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.yaw = 213.0; // fieldtype: float  isarray: False 
      test_global_vision_position_estimate.covariance = [241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0]; // fieldtype: float  isarray: True 
      test_global_vision_position_estimate.reset_counter = 97; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //global_vision_position_estimate
 var t = new Buffer.from(test_global_vision_position_estimate.pack(mav));
   return [test_global_vision_position_estimate,t]; // return an array of unpacked and packed options
};
exports.test_global_vision_position_estimate = test_global_vision_position_estimate; // expose in module

let test_vision_position_estimate = function () {
   if ( verbose == 2 ) console.log('test creating and packing:vision_position_estimate'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:vision_position_estimate          \r'); }
   var test_vision_position_estimate = new mavlink20.messages.vision_position_estimate(); 
      test_vision_position_estimate.usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_vision_position_estimate.x = 73.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.y = 101.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.z = 129.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.roll = 157.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.pitch = 185.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.yaw = 213.0; // fieldtype: float  isarray: False 
      test_vision_position_estimate.covariance = [241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0]; // fieldtype: float  isarray: True 
      test_vision_position_estimate.reset_counter = 97; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //vision_position_estimate
 var t = new Buffer.from(test_vision_position_estimate.pack(mav));
   return [test_vision_position_estimate,t]; // return an array of unpacked and packed options
};
exports.test_vision_position_estimate = test_vision_position_estimate; // expose in module

let test_vision_speed_estimate = function () {
   if ( verbose == 2 ) console.log('test creating and packing:vision_speed_estimate'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:vision_speed_estimate          \r'); }
   var test_vision_speed_estimate = new mavlink20.messages.vision_speed_estimate(); 
      test_vision_speed_estimate.usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_vision_speed_estimate.x = 73.0; // fieldtype: float  isarray: False 
      test_vision_speed_estimate.y = 101.0; // fieldtype: float  isarray: False 
      test_vision_speed_estimate.z = 129.0; // fieldtype: float  isarray: False 
      test_vision_speed_estimate.covariance = [157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0]; // fieldtype: float  isarray: True 
      test_vision_speed_estimate.reset_counter = 173; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //vision_speed_estimate
 var t = new Buffer.from(test_vision_speed_estimate.pack(mav));
   return [test_vision_speed_estimate,t]; // return an array of unpacked and packed options
};
exports.test_vision_speed_estimate = test_vision_speed_estimate; // expose in module

let test_vicon_position_estimate = function () {
   if ( verbose == 2 ) console.log('test creating and packing:vicon_position_estimate'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:vicon_position_estimate          \r'); }
   var test_vicon_position_estimate = new mavlink20.messages.vicon_position_estimate(); 
      test_vicon_position_estimate.usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_vicon_position_estimate.x = 73.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.y = 101.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.z = 129.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.roll = 157.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.pitch = 185.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.yaw = 213.0; // fieldtype: float  isarray: False 
      test_vicon_position_estimate.covariance = [241.0, 242.0, 243.0, 244.0, 245.0, 246.0, 247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0, 258.0, 259.0, 260.0, 261.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //vicon_position_estimate
 var t = new Buffer.from(test_vicon_position_estimate.pack(mav));
   return [test_vicon_position_estimate,t]; // return an array of unpacked and packed options
};
exports.test_vicon_position_estimate = test_vicon_position_estimate; // expose in module

let test_highres_imu = function () {
   if ( verbose == 2 ) console.log('test creating and packing:highres_imu'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:highres_imu          \r'); }
   var test_highres_imu = new mavlink20.messages.highres_imu(); 
      test_highres_imu.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_highres_imu.xacc = 73.0; // fieldtype: float  isarray: False 
      test_highres_imu.yacc = 101.0; // fieldtype: float  isarray: False 
      test_highres_imu.zacc = 129.0; // fieldtype: float  isarray: False 
      test_highres_imu.xgyro = 157.0; // fieldtype: float  isarray: False 
      test_highres_imu.ygyro = 185.0; // fieldtype: float  isarray: False 
      test_highres_imu.zgyro = 213.0; // fieldtype: float  isarray: False 
      test_highres_imu.xmag = 241.0; // fieldtype: float  isarray: False 
      test_highres_imu.ymag = 269.0; // fieldtype: float  isarray: False 
      test_highres_imu.zmag = 297.0; // fieldtype: float  isarray: False 
      test_highres_imu.abs_pressure = 325.0; // fieldtype: float  isarray: False 
      test_highres_imu.diff_pressure = 353.0; // fieldtype: float  isarray: False 
      test_highres_imu.pressure_alt = 381.0; // fieldtype: float  isarray: False 
      test_highres_imu.temperature = 409.0; // fieldtype: float  isarray: False 
      test_highres_imu.fields_updated = 20355; // fieldtype: uint16_t  isarray: False 
      test_highres_imu.id = 63; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //highres_imu
 var t = new Buffer.from(test_highres_imu.pack(mav));
   return [test_highres_imu,t]; // return an array of unpacked and packed options
};
exports.test_highres_imu = test_highres_imu; // expose in module

let test_optical_flow_rad = function () {
   if ( verbose == 2 ) console.log('test creating and packing:optical_flow_rad'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:optical_flow_rad          \r'); }
   var test_optical_flow_rad = new mavlink20.messages.optical_flow_rad(); 
      test_optical_flow_rad.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_optical_flow_rad.integration_time_us = 963497880; // fieldtype: uint32_t  isarray: False 
      test_optical_flow_rad.integrated_x = 101.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.integrated_y = 129.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.integrated_xgyro = 157.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.integrated_ygyro = 185.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.integrated_zgyro = 213.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.time_delta_distance_us = 963499128; // fieldtype: uint32_t  isarray: False 
      test_optical_flow_rad.distance = 269.0; // fieldtype: float  isarray: False 
      test_optical_flow_rad.temperature = (new Int16Array([19315]))[0]; // fieldtype: int16_t  isarray: False 
      test_optical_flow_rad.sensor_id = 3; // fieldtype: uint8_t  isarray: False 
      test_optical_flow_rad.quality = 70; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //optical_flow_rad
 var t = new Buffer.from(test_optical_flow_rad.pack(mav));
   return [test_optical_flow_rad,t]; // return an array of unpacked and packed options
};
exports.test_optical_flow_rad = test_optical_flow_rad; // expose in module

let test_hil_sensor = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_sensor'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_sensor          \r'); }
   var test_hil_sensor = new mavlink20.messages.hil_sensor(); 
      test_hil_sensor.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_sensor.xacc = 73.0; // fieldtype: float  isarray: False 
      test_hil_sensor.yacc = 101.0; // fieldtype: float  isarray: False 
      test_hil_sensor.zacc = 129.0; // fieldtype: float  isarray: False 
      test_hil_sensor.xgyro = 157.0; // fieldtype: float  isarray: False 
      test_hil_sensor.ygyro = 185.0; // fieldtype: float  isarray: False 
      test_hil_sensor.zgyro = 213.0; // fieldtype: float  isarray: False 
      test_hil_sensor.xmag = 241.0; // fieldtype: float  isarray: False 
      test_hil_sensor.ymag = 269.0; // fieldtype: float  isarray: False 
      test_hil_sensor.zmag = 297.0; // fieldtype: float  isarray: False 
      test_hil_sensor.abs_pressure = 325.0; // fieldtype: float  isarray: False 
      test_hil_sensor.diff_pressure = 353.0; // fieldtype: float  isarray: False 
      test_hil_sensor.pressure_alt = 381.0; // fieldtype: float  isarray: False 
      test_hil_sensor.temperature = 409.0; // fieldtype: float  isarray: False 
      test_hil_sensor.fields_updated = 963500584; // fieldtype: uint32_t  isarray: False 
      test_hil_sensor.id = 197; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_sensor
 var t = new Buffer.from(test_hil_sensor.pack(mav));
   return [test_hil_sensor,t]; // return an array of unpacked and packed options
};
exports.test_hil_sensor = test_hil_sensor; // expose in module

let test_sim_state = function () {
   if ( verbose == 2 ) console.log('test creating and packing:sim_state'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:sim_state          \r'); }
   var test_sim_state = new mavlink20.messages.sim_state(); 
      test_sim_state.q1 = 17.0; // fieldtype: float  isarray: False 
      test_sim_state.q2 = 45.0; // fieldtype: float  isarray: False 
      test_sim_state.q3 = 73.0; // fieldtype: float  isarray: False 
      test_sim_state.q4 = 101.0; // fieldtype: float  isarray: False 
      test_sim_state.roll = 129.0; // fieldtype: float  isarray: False 
      test_sim_state.pitch = 157.0; // fieldtype: float  isarray: False 
      test_sim_state.yaw = 185.0; // fieldtype: float  isarray: False 
      test_sim_state.xacc = 213.0; // fieldtype: float  isarray: False 
      test_sim_state.yacc = 241.0; // fieldtype: float  isarray: False 
      test_sim_state.zacc = 269.0; // fieldtype: float  isarray: False 
      test_sim_state.xgyro = 297.0; // fieldtype: float  isarray: False 
      test_sim_state.ygyro = 325.0; // fieldtype: float  isarray: False 
      test_sim_state.zgyro = 353.0; // fieldtype: float  isarray: False 
      test_sim_state.lat = 381.0; // fieldtype: float  isarray: False 
      test_sim_state.lon = 409.0; // fieldtype: float  isarray: False 
      test_sim_state.alt = 437.0; // fieldtype: float  isarray: False 
      test_sim_state.std_dev_horz = 465.0; // fieldtype: float  isarray: False 
      test_sim_state.std_dev_vert = 493.0; // fieldtype: float  isarray: False 
      test_sim_state.vn = 521.0; // fieldtype: float  isarray: False 
      test_sim_state.ve = 549.0; // fieldtype: float  isarray: False 
      test_sim_state.vd = 577.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //sim_state
 var t = new Buffer.from(test_sim_state.pack(mav));
   return [test_sim_state,t]; // return an array of unpacked and packed options
};
exports.test_sim_state = test_sim_state; // expose in module

let test_radio_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:radio_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:radio_status          \r'); }
   var test_radio_status = new mavlink20.messages.radio_status(); 
      test_radio_status.rxerrors = 17235; // fieldtype: uint16_t  isarray: False 
      test_radio_status.fixed = 17339; // fieldtype: uint16_t  isarray: False 
      test_radio_status.rssi = 17; // fieldtype: uint8_t  isarray: False 
      test_radio_status.remrssi = 84; // fieldtype: uint8_t  isarray: False 
      test_radio_status.txbuf = 151; // fieldtype: uint8_t  isarray: False 
      test_radio_status.noise = 218; // fieldtype: uint8_t  isarray: False 
      test_radio_status.remnoise = 29; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //radio_status
 var t = new Buffer.from(test_radio_status.pack(mav));
   return [test_radio_status,t]; // return an array of unpacked and packed options
};
exports.test_radio_status = test_radio_status; // expose in module

let test_file_transfer_protocol = function () {
   if ( verbose == 2 ) console.log('test creating and packing:file_transfer_protocol'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:file_transfer_protocol          \r'); }
   var test_file_transfer_protocol = new mavlink20.messages.file_transfer_protocol(); 
      test_file_transfer_protocol.target_network = 5; // fieldtype: uint8_t  isarray: False 
      test_file_transfer_protocol.target_system = 72; // fieldtype: uint8_t  isarray: False 
      test_file_transfer_protocol.target_component = 139; // fieldtype: uint8_t  isarray: False 
      test_file_transfer_protocol.payload = new Buffer.from([206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //file_transfer_protocol
 var t = new Buffer.from(test_file_transfer_protocol.pack(mav));
   return [test_file_transfer_protocol,t]; // return an array of unpacked and packed options
};
exports.test_file_transfer_protocol = test_file_transfer_protocol; // expose in module

let test_timesync = function () {
   if ( verbose == 2 ) console.log('test creating and packing:timesync'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:timesync          \r'); }
   var test_timesync = new mavlink20.messages.timesync(); 
      test_timesync.tc1 = wrap_long(Long.fromString("93372036854775807", false)); // fieldtype: int64_t  isarray: False 
      test_timesync.ts1 = wrap_long(Long.fromString("93372036854776311", false)); // fieldtype: int64_t  isarray: False 
 //var t = new Buffer.from([])
; //timesync
 var t = new Buffer.from(test_timesync.pack(mav));
   return [test_timesync,t]; // return an array of unpacked and packed options
};
exports.test_timesync = test_timesync; // expose in module

let test_camera_trigger = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_trigger'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_trigger          \r'); }
   var test_camera_trigger = new mavlink20.messages.camera_trigger(); 
      test_camera_trigger.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_camera_trigger.seq = 963497880; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //camera_trigger
 var t = new Buffer.from(test_camera_trigger.pack(mav));
   return [test_camera_trigger,t]; // return an array of unpacked and packed options
};
exports.test_camera_trigger = test_camera_trigger; // expose in module

let test_hil_gps = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_gps'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_gps          \r'); }
   var test_hil_gps = new mavlink20.messages.hil_gps(); 
      test_hil_gps.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_gps.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_gps.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_gps.alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_gps.eph = 18275; // fieldtype: uint16_t  isarray: False 
      test_hil_gps.epv = 18379; // fieldtype: uint16_t  isarray: False 
      test_hil_gps.vel = 18483; // fieldtype: uint16_t  isarray: False 
      test_hil_gps.vn = (new Int16Array([18587]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_gps.ve = (new Int16Array([18691]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_gps.vd = (new Int16Array([18795]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_gps.cog = 18899; // fieldtype: uint16_t  isarray: False 
      test_hil_gps.fix_type = 235; // fieldtype: uint8_t  isarray: False 
      test_hil_gps.satellites_visible = 46; // fieldtype: uint8_t  isarray: False 
      test_hil_gps.id = 113; // fieldtype: uint8_t  isarray: False 
      test_hil_gps.yaw = 19159; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_gps
 var t = new Buffer.from(test_hil_gps.pack(mav));
   return [test_hil_gps,t]; // return an array of unpacked and packed options
};
exports.test_hil_gps = test_hil_gps; // expose in module

let test_hil_optical_flow = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_optical_flow'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_optical_flow          \r'); }
   var test_hil_optical_flow = new mavlink20.messages.hil_optical_flow(); 
      test_hil_optical_flow.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_optical_flow.integration_time_us = 963497880; // fieldtype: uint32_t  isarray: False 
      test_hil_optical_flow.integrated_x = 101.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.integrated_y = 129.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.integrated_xgyro = 157.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.integrated_ygyro = 185.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.integrated_zgyro = 213.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.time_delta_distance_us = 963499128; // fieldtype: uint32_t  isarray: False 
      test_hil_optical_flow.distance = 269.0; // fieldtype: float  isarray: False 
      test_hil_optical_flow.temperature = (new Int16Array([19315]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_optical_flow.sensor_id = 3; // fieldtype: uint8_t  isarray: False 
      test_hil_optical_flow.quality = 70; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_optical_flow
 var t = new Buffer.from(test_hil_optical_flow.pack(mav));
   return [test_hil_optical_flow,t]; // return an array of unpacked and packed options
};
exports.test_hil_optical_flow = test_hil_optical_flow; // expose in module

let test_hil_state_quaternion = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hil_state_quaternion'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hil_state_quaternion          \r'); }
   var test_hil_state_quaternion = new mavlink20.messages.hil_state_quaternion(); 
      test_hil_state_quaternion.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_hil_state_quaternion.attitude_quaternion = [73.0, 74.0, 75.0, 76.0]; // fieldtype: float  isarray: True 
      test_hil_state_quaternion.rollspeed = 185.0; // fieldtype: float  isarray: False 
      test_hil_state_quaternion.pitchspeed = 213.0; // fieldtype: float  isarray: False 
      test_hil_state_quaternion.yawspeed = 241.0; // fieldtype: float  isarray: False 
      test_hil_state_quaternion.lat = (new Int32Array([963499336]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state_quaternion.lon = (new Int32Array([963499544]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state_quaternion.alt = (new Int32Array([963499752]))[0]; // fieldtype: int32_t  isarray: False 
      test_hil_state_quaternion.vx = (new Int16Array([19731]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state_quaternion.vy = (new Int16Array([19835]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state_quaternion.vz = (new Int16Array([19939]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state_quaternion.ind_airspeed = 20043; // fieldtype: uint16_t  isarray: False 
      test_hil_state_quaternion.true_airspeed = 20147; // fieldtype: uint16_t  isarray: False 
      test_hil_state_quaternion.xacc = (new Int16Array([20251]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state_quaternion.yacc = (new Int16Array([20355]))[0]; // fieldtype: int16_t  isarray: False 
      test_hil_state_quaternion.zacc = (new Int16Array([20459]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //hil_state_quaternion
 var t = new Buffer.from(test_hil_state_quaternion.pack(mav));
   return [test_hil_state_quaternion,t]; // return an array of unpacked and packed options
};
exports.test_hil_state_quaternion = test_hil_state_quaternion; // expose in module

let test_scaled_imu2 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_imu2'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_imu2          \r'); }
   var test_scaled_imu2 = new mavlink20.messages.scaled_imu2(); 
      test_scaled_imu2.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_imu2.xacc = (new Int16Array([17443]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.yacc = (new Int16Array([17547]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.zacc = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.xgyro = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.ygyro = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.zgyro = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.xmag = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.ymag = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.zmag = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu2.temperature = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_imu2
 var t = new Buffer.from(test_scaled_imu2.pack(mav));
   return [test_scaled_imu2,t]; // return an array of unpacked and packed options
};
exports.test_scaled_imu2 = test_scaled_imu2; // expose in module

let test_log_request_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_request_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_request_list          \r'); }
   var test_log_request_list = new mavlink20.messages.log_request_list(); 
      test_log_request_list.start = 17235; // fieldtype: uint16_t  isarray: False 
      test_log_request_list.end = 17339; // fieldtype: uint16_t  isarray: False 
      test_log_request_list.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_log_request_list.target_component = 84; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //log_request_list
 var t = new Buffer.from(test_log_request_list.pack(mav));
   return [test_log_request_list,t]; // return an array of unpacked and packed options
};
exports.test_log_request_list = test_log_request_list; // expose in module

let test_log_entry = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_entry'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_entry          \r'); }
   var test_log_entry = new mavlink20.messages.log_entry(); 
      test_log_entry.time_utc = 963497464; // fieldtype: uint32_t  isarray: False 
      test_log_entry.size = 963497672; // fieldtype: uint32_t  isarray: False 
      test_log_entry.id = 17651; // fieldtype: uint16_t  isarray: False 
      test_log_entry.num_logs = 17755; // fieldtype: uint16_t  isarray: False 
      test_log_entry.last_log_num = 17859; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //log_entry
 var t = new Buffer.from(test_log_entry.pack(mav));
   return [test_log_entry,t]; // return an array of unpacked and packed options
};
exports.test_log_entry = test_log_entry; // expose in module

let test_log_request_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_request_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_request_data          \r'); }
   var test_log_request_data = new mavlink20.messages.log_request_data(); 
      test_log_request_data.ofs = 963497464; // fieldtype: uint32_t  isarray: False 
      test_log_request_data.count = 963497672; // fieldtype: uint32_t  isarray: False 
      test_log_request_data.id = 17651; // fieldtype: uint16_t  isarray: False 
      test_log_request_data.target_system = 163; // fieldtype: uint8_t  isarray: False 
      test_log_request_data.target_component = 230; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //log_request_data
 var t = new Buffer.from(test_log_request_data.pack(mav));
   return [test_log_request_data,t]; // return an array of unpacked and packed options
};
exports.test_log_request_data = test_log_request_data; // expose in module

let test_log_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_data          \r'); }
   var test_log_data = new mavlink20.messages.log_data(); 
      test_log_data.ofs = 963497464; // fieldtype: uint32_t  isarray: False 
      test_log_data.id = 17443; // fieldtype: uint16_t  isarray: False 
      test_log_data.count = 151; // fieldtype: uint8_t  isarray: False 
      test_log_data.data = new Buffer.from([218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //log_data
 var t = new Buffer.from(test_log_data.pack(mav));
   return [test_log_data,t]; // return an array of unpacked and packed options
};
exports.test_log_data = test_log_data; // expose in module

let test_log_erase = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_erase'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_erase          \r'); }
   var test_log_erase = new mavlink20.messages.log_erase(); 
      test_log_erase.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_log_erase.target_component = 72; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //log_erase
 var t = new Buffer.from(test_log_erase.pack(mav));
   return [test_log_erase,t]; // return an array of unpacked and packed options
};
exports.test_log_erase = test_log_erase; // expose in module

let test_log_request_end = function () {
   if ( verbose == 2 ) console.log('test creating and packing:log_request_end'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:log_request_end          \r'); }
   var test_log_request_end = new mavlink20.messages.log_request_end(); 
      test_log_request_end.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_log_request_end.target_component = 72; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //log_request_end
 var t = new Buffer.from(test_log_request_end.pack(mav));
   return [test_log_request_end,t]; // return an array of unpacked and packed options
};
exports.test_log_request_end = test_log_request_end; // expose in module

let test_gps_inject_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_inject_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_inject_data          \r'); }
   var test_gps_inject_data = new mavlink20.messages.gps_inject_data(); 
      test_gps_inject_data.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_gps_inject_data.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_gps_inject_data.len = 139; // fieldtype: uint8_t  isarray: False 
      test_gps_inject_data.data = new Buffer.from([206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //gps_inject_data
 var t = new Buffer.from(test_gps_inject_data.pack(mav));
   return [test_gps_inject_data,t]; // return an array of unpacked and packed options
};
exports.test_gps_inject_data = test_gps_inject_data; // expose in module

let test_gps2_raw = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps2_raw'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps2_raw          \r'); }
   var test_gps2_raw = new mavlink20.messages.gps2_raw(); 
      test_gps2_raw.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_gps2_raw.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_raw.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_raw.alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_raw.dgps_age = 963498504; // fieldtype: uint32_t  isarray: False 
      test_gps2_raw.eph = 18483; // fieldtype: uint16_t  isarray: False 
      test_gps2_raw.epv = 18587; // fieldtype: uint16_t  isarray: False 
      test_gps2_raw.vel = 18691; // fieldtype: uint16_t  isarray: False 
      test_gps2_raw.cog = 18795; // fieldtype: uint16_t  isarray: False 
      test_gps2_raw.fix_type = 101; // fieldtype: uint8_t  isarray: False 
      test_gps2_raw.satellites_visible = 168; // fieldtype: uint8_t  isarray: False 
      test_gps2_raw.dgps_numch = 235; // fieldtype: uint8_t  isarray: False 
      test_gps2_raw.yaw = 19055; // fieldtype: uint16_t  isarray: False 
      test_gps2_raw.alt_ellipsoid = (new Int32Array([963499388]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_raw.h_acc = 963499596; // fieldtype: uint32_t  isarray: False 
      test_gps2_raw.v_acc = 963499804; // fieldtype: uint32_t  isarray: False 
      test_gps2_raw.vel_acc = 963500012; // fieldtype: uint32_t  isarray: False 
      test_gps2_raw.hdg_acc = 963500220; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //gps2_raw
 var t = new Buffer.from(test_gps2_raw.pack(mav));
   return [test_gps2_raw,t]; // return an array of unpacked and packed options
};
exports.test_gps2_raw = test_gps2_raw; // expose in module

let test_power_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:power_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:power_status          \r'); }
   var test_power_status = new mavlink20.messages.power_status(); 
      test_power_status.Vcc = 17235; // fieldtype: uint16_t  isarray: False 
      test_power_status.Vservo = 17339; // fieldtype: uint16_t  isarray: False 
      test_power_status.flags = 17443; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //power_status
 var t = new Buffer.from(test_power_status.pack(mav));
   return [test_power_status,t]; // return an array of unpacked and packed options
};
exports.test_power_status = test_power_status; // expose in module

let test_serial_control = function () {
   if ( verbose == 2 ) console.log('test creating and packing:serial_control'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:serial_control          \r'); }
   var test_serial_control = new mavlink20.messages.serial_control(); 
      test_serial_control.baudrate = 963497464; // fieldtype: uint32_t  isarray: False 
      test_serial_control.timeout = 17443; // fieldtype: uint16_t  isarray: False 
      test_serial_control.device = 151; // fieldtype: uint8_t  isarray: False 
      test_serial_control.flags = 218; // fieldtype: uint8_t  isarray: False 
      test_serial_control.count = 29; // fieldtype: uint8_t  isarray: False 
      test_serial_control.data = new Buffer.from([96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_serial_control.target_system = 178; // fieldtype: uint8_t  isarray: False 
      test_serial_control.target_component = 245; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //serial_control
 var t = new Buffer.from(test_serial_control.pack(mav));
   return [test_serial_control,t]; // return an array of unpacked and packed options
};
exports.test_serial_control = test_serial_control; // expose in module

let test_gps_rtk = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_rtk'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_rtk          \r'); }
   var test_gps_rtk = new mavlink20.messages.gps_rtk(); 
      test_gps_rtk.time_last_baseline_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gps_rtk.tow = 963497672; // fieldtype: uint32_t  isarray: False 
      test_gps_rtk.baseline_a_mm = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_rtk.baseline_b_mm = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_rtk.baseline_c_mm = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_rtk.accuracy = 963498504; // fieldtype: uint32_t  isarray: False 
      test_gps_rtk.iar_num_hypotheses = (new Int32Array([963498712]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_rtk.wn = 18691; // fieldtype: uint16_t  isarray: False 
      test_gps_rtk.rtk_receiver_id = 223; // fieldtype: uint8_t  isarray: False 
      test_gps_rtk.rtk_health = 34; // fieldtype: uint8_t  isarray: False 
      test_gps_rtk.rtk_rate = 101; // fieldtype: uint8_t  isarray: False 
      test_gps_rtk.nsats = 168; // fieldtype: uint8_t  isarray: False 
      test_gps_rtk.baseline_coords_type = 235; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gps_rtk
 var t = new Buffer.from(test_gps_rtk.pack(mav));
   return [test_gps_rtk,t]; // return an array of unpacked and packed options
};
exports.test_gps_rtk = test_gps_rtk; // expose in module

let test_gps2_rtk = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps2_rtk'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps2_rtk          \r'); }
   var test_gps2_rtk = new mavlink20.messages.gps2_rtk(); 
      test_gps2_rtk.time_last_baseline_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gps2_rtk.tow = 963497672; // fieldtype: uint32_t  isarray: False 
      test_gps2_rtk.baseline_a_mm = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_rtk.baseline_b_mm = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_rtk.baseline_c_mm = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_rtk.accuracy = 963498504; // fieldtype: uint32_t  isarray: False 
      test_gps2_rtk.iar_num_hypotheses = (new Int32Array([963498712]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps2_rtk.wn = 18691; // fieldtype: uint16_t  isarray: False 
      test_gps2_rtk.rtk_receiver_id = 223; // fieldtype: uint8_t  isarray: False 
      test_gps2_rtk.rtk_health = 34; // fieldtype: uint8_t  isarray: False 
      test_gps2_rtk.rtk_rate = 101; // fieldtype: uint8_t  isarray: False 
      test_gps2_rtk.nsats = 168; // fieldtype: uint8_t  isarray: False 
      test_gps2_rtk.baseline_coords_type = 235; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gps2_rtk
 var t = new Buffer.from(test_gps2_rtk.pack(mav));
   return [test_gps2_rtk,t]; // return an array of unpacked and packed options
};
exports.test_gps2_rtk = test_gps2_rtk; // expose in module

let test_scaled_imu3 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_imu3'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_imu3          \r'); }
   var test_scaled_imu3 = new mavlink20.messages.scaled_imu3(); 
      test_scaled_imu3.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_imu3.xacc = (new Int16Array([17443]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.yacc = (new Int16Array([17547]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.zacc = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.xgyro = (new Int16Array([17755]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.ygyro = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.zgyro = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.xmag = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.ymag = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.zmag = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_imu3.temperature = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_imu3
 var t = new Buffer.from(test_scaled_imu3.pack(mav));
   return [test_scaled_imu3,t]; // return an array of unpacked and packed options
};
exports.test_scaled_imu3 = test_scaled_imu3; // expose in module

let test_data_transmission_handshake = function () {
   if ( verbose == 2 ) console.log('test creating and packing:data_transmission_handshake'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:data_transmission_handshake          \r'); }
   var test_data_transmission_handshake = new mavlink20.messages.data_transmission_handshake(); 
      test_data_transmission_handshake.size = 963497464; // fieldtype: uint32_t  isarray: False 
      test_data_transmission_handshake.width = 17443; // fieldtype: uint16_t  isarray: False 
      test_data_transmission_handshake.height = 17547; // fieldtype: uint16_t  isarray: False 
      test_data_transmission_handshake.packets = 17651; // fieldtype: uint16_t  isarray: False 
      test_data_transmission_handshake.type = 163; // fieldtype: uint8_t  isarray: False 
      test_data_transmission_handshake.payload = 230; // fieldtype: uint8_t  isarray: False 
      test_data_transmission_handshake.jpg_quality = 41; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //data_transmission_handshake
 var t = new Buffer.from(test_data_transmission_handshake.pack(mav));
   return [test_data_transmission_handshake,t]; // return an array of unpacked and packed options
};
exports.test_data_transmission_handshake = test_data_transmission_handshake; // expose in module

let test_encapsulated_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:encapsulated_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:encapsulated_data          \r'); }
   var test_encapsulated_data = new mavlink20.messages.encapsulated_data(); 
      test_encapsulated_data.seqnr = 17235; // fieldtype: uint16_t  isarray: False 
      test_encapsulated_data.data = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //encapsulated_data
 var t = new Buffer.from(test_encapsulated_data.pack(mav));
   return [test_encapsulated_data,t]; // return an array of unpacked and packed options
};
exports.test_encapsulated_data = test_encapsulated_data; // expose in module

let test_distance_sensor = function () {
   if ( verbose == 2 ) console.log('test creating and packing:distance_sensor'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:distance_sensor          \r'); }
   var test_distance_sensor = new mavlink20.messages.distance_sensor(); 
      test_distance_sensor.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_distance_sensor.min_distance = 17443; // fieldtype: uint16_t  isarray: False 
      test_distance_sensor.max_distance = 17547; // fieldtype: uint16_t  isarray: False 
      test_distance_sensor.current_distance = 17651; // fieldtype: uint16_t  isarray: False 
      test_distance_sensor.type = 163; // fieldtype: uint8_t  isarray: False 
      test_distance_sensor.id = 230; // fieldtype: uint8_t  isarray: False 
      test_distance_sensor.orientation = 41; // fieldtype: uint8_t  isarray: False 
      test_distance_sensor.covariance = 108; // fieldtype: uint8_t  isarray: False 
      test_distance_sensor.horizontal_fov = 115.0; // fieldtype: float  isarray: False 
      test_distance_sensor.vertical_fov = 143.0; // fieldtype: float  isarray: False 
      test_distance_sensor.quaternion = [171.0, 172.0, 173.0, 174.0]; // fieldtype: float  isarray: True 
      test_distance_sensor.signal_quality = 247; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //distance_sensor
 var t = new Buffer.from(test_distance_sensor.pack(mav));
   return [test_distance_sensor,t]; // return an array of unpacked and packed options
};
exports.test_distance_sensor = test_distance_sensor; // expose in module

let test_terrain_request = function () {
   if ( verbose == 2 ) console.log('test creating and packing:terrain_request'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:terrain_request          \r'); }
   var test_terrain_request = new mavlink20.messages.terrain_request(); 
      test_terrain_request.mask = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_terrain_request.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_request.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_request.grid_spacing = 18067; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //terrain_request
 var t = new Buffer.from(test_terrain_request.pack(mav));
   return [test_terrain_request,t]; // return an array of unpacked and packed options
};
exports.test_terrain_request = test_terrain_request; // expose in module

let test_terrain_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:terrain_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:terrain_data          \r'); }
   var test_terrain_data = new mavlink20.messages.terrain_data(); 
      test_terrain_data.lat = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_data.lon = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_data.grid_spacing = 17651; // fieldtype: uint16_t  isarray: False 
      test_terrain_data.data = [17755, 17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764, 17765, 17766, 17767, 17768, 17769, 17770]; // fieldtype: int16_t  isarray: True 
      test_terrain_data.gridbit = 3; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //terrain_data
 var t = new Buffer.from(test_terrain_data.pack(mav));
   return [test_terrain_data,t]; // return an array of unpacked and packed options
};
exports.test_terrain_data = test_terrain_data; // expose in module

let test_terrain_check = function () {
   if ( verbose == 2 ) console.log('test creating and packing:terrain_check'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:terrain_check          \r'); }
   var test_terrain_check = new mavlink20.messages.terrain_check(); 
      test_terrain_check.lat = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_check.lon = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
 //var t = new Buffer.from([])
; //terrain_check
 var t = new Buffer.from(test_terrain_check.pack(mav));
   return [test_terrain_check,t]; // return an array of unpacked and packed options
};
exports.test_terrain_check = test_terrain_check; // expose in module

let test_terrain_report = function () {
   if ( verbose == 2 ) console.log('test creating and packing:terrain_report'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:terrain_report          \r'); }
   var test_terrain_report = new mavlink20.messages.terrain_report(); 
      test_terrain_report.lat = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_report.lon = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_terrain_report.terrain_height = 73.0; // fieldtype: float  isarray: False 
      test_terrain_report.current_height = 101.0; // fieldtype: float  isarray: False 
      test_terrain_report.spacing = 18067; // fieldtype: uint16_t  isarray: False 
      test_terrain_report.pending = 18171; // fieldtype: uint16_t  isarray: False 
      test_terrain_report.loaded = 18275; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //terrain_report
 var t = new Buffer.from(test_terrain_report.pack(mav));
   return [test_terrain_report,t]; // return an array of unpacked and packed options
};
exports.test_terrain_report = test_terrain_report; // expose in module

let test_scaled_pressure2 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_pressure2'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_pressure2          \r'); }
   var test_scaled_pressure2 = new mavlink20.messages.scaled_pressure2(); 
      test_scaled_pressure2.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_pressure2.press_abs = 45.0; // fieldtype: float  isarray: False 
      test_scaled_pressure2.press_diff = 73.0; // fieldtype: float  isarray: False 
      test_scaled_pressure2.temperature = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_pressure2.temperature_press_diff = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_pressure2
 var t = new Buffer.from(test_scaled_pressure2.pack(mav));
   return [test_scaled_pressure2,t]; // return an array of unpacked and packed options
};
exports.test_scaled_pressure2 = test_scaled_pressure2; // expose in module

let test_att_pos_mocap = function () {
   if ( verbose == 2 ) console.log('test creating and packing:att_pos_mocap'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:att_pos_mocap          \r'); }
   var test_att_pos_mocap = new mavlink20.messages.att_pos_mocap(); 
      test_att_pos_mocap.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_att_pos_mocap.q = [73.0, 74.0, 75.0, 76.0]; // fieldtype: float  isarray: True 
      test_att_pos_mocap.x = 185.0; // fieldtype: float  isarray: False 
      test_att_pos_mocap.y = 213.0; // fieldtype: float  isarray: False 
      test_att_pos_mocap.z = 241.0; // fieldtype: float  isarray: False 
      test_att_pos_mocap.covariance = [269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0, 279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 285.0, 286.0, 287.0, 288.0, 289.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //att_pos_mocap
 var t = new Buffer.from(test_att_pos_mocap.pack(mav));
   return [test_att_pos_mocap,t]; // return an array of unpacked and packed options
};
exports.test_att_pos_mocap = test_att_pos_mocap; // expose in module

let test_set_actuator_control_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_actuator_control_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_actuator_control_target          \r'); }
   var test_set_actuator_control_target = new mavlink20.messages.set_actuator_control_target(); 
      test_set_actuator_control_target.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_set_actuator_control_target.controls = [73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0]; // fieldtype: float  isarray: True 
      test_set_actuator_control_target.group_mlx = 125; // fieldtype: uint8_t  isarray: False 
      test_set_actuator_control_target.target_system = 192; // fieldtype: uint8_t  isarray: False 
      test_set_actuator_control_target.target_component = 3; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //set_actuator_control_target
 var t = new Buffer.from(test_set_actuator_control_target.pack(mav));
   return [test_set_actuator_control_target,t]; // return an array of unpacked and packed options
};
exports.test_set_actuator_control_target = test_set_actuator_control_target; // expose in module

let test_actuator_control_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:actuator_control_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:actuator_control_target          \r'); }
   var test_actuator_control_target = new mavlink20.messages.actuator_control_target(); 
      test_actuator_control_target.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_actuator_control_target.controls = [73.0, 74.0, 75.0, 76.0, 77.0, 78.0, 79.0, 80.0]; // fieldtype: float  isarray: True 
      test_actuator_control_target.group_mlx = 125; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //actuator_control_target
 var t = new Buffer.from(test_actuator_control_target.pack(mav));
   return [test_actuator_control_target,t]; // return an array of unpacked and packed options
};
exports.test_actuator_control_target = test_actuator_control_target; // expose in module

let test_altitude = function () {
   if ( verbose == 2 ) console.log('test creating and packing:altitude'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:altitude          \r'); }
   var test_altitude = new mavlink20.messages.altitude(); 
      test_altitude.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_altitude.altitude_monotonic = 73.0; // fieldtype: float  isarray: False 
      test_altitude.altitude_amsl = 101.0; // fieldtype: float  isarray: False 
      test_altitude.altitude_local = 129.0; // fieldtype: float  isarray: False 
      test_altitude.altitude_relative = 157.0; // fieldtype: float  isarray: False 
      test_altitude.altitude_terrain = 185.0; // fieldtype: float  isarray: False 
      test_altitude.bottom_clearance = 213.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //altitude
 var t = new Buffer.from(test_altitude.pack(mav));
   return [test_altitude,t]; // return an array of unpacked and packed options
};
exports.test_altitude = test_altitude; // expose in module

let test_resource_request = function () {
   if ( verbose == 2 ) console.log('test creating and packing:resource_request'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:resource_request          \r'); }
   var test_resource_request = new mavlink20.messages.resource_request(); 
      test_resource_request.request_id = 5; // fieldtype: uint8_t  isarray: False 
      test_resource_request.uri_type = 72; // fieldtype: uint8_t  isarray: False 
      test_resource_request.uri = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_resource_request.transfer_type = 243; // fieldtype: uint8_t  isarray: False 
      test_resource_request.storage = new Buffer.from([54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //resource_request
 var t = new Buffer.from(test_resource_request.pack(mav));
   return [test_resource_request,t]; // return an array of unpacked and packed options
};
exports.test_resource_request = test_resource_request; // expose in module

let test_scaled_pressure3 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:scaled_pressure3'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:scaled_pressure3          \r'); }
   var test_scaled_pressure3 = new mavlink20.messages.scaled_pressure3(); 
      test_scaled_pressure3.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_scaled_pressure3.press_abs = 45.0; // fieldtype: float  isarray: False 
      test_scaled_pressure3.press_diff = 73.0; // fieldtype: float  isarray: False 
      test_scaled_pressure3.temperature = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_scaled_pressure3.temperature_press_diff = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //scaled_pressure3
 var t = new Buffer.from(test_scaled_pressure3.pack(mav));
   return [test_scaled_pressure3,t]; // return an array of unpacked and packed options
};
exports.test_scaled_pressure3 = test_scaled_pressure3; // expose in module

let test_follow_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:follow_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:follow_target          \r'); }
   var test_follow_target = new mavlink20.messages.follow_target(); 
      test_follow_target.timestamp = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_follow_target.custom_state = wrap_long(Long.fromString("93372036854776311", true)); // fieldtype: uint64_t  isarray: False 
      test_follow_target.lat = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_follow_target.lon = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_follow_target.alt = 185.0; // fieldtype: float  isarray: False 
      test_follow_target.vel = [213.0, 214.0, 215.0]; // fieldtype: float  isarray: True 
      test_follow_target.acc = [297.0, 298.0, 299.0]; // fieldtype: float  isarray: True 
      test_follow_target.attitude_q = [381.0, 382.0, 383.0, 384.0]; // fieldtype: float  isarray: True 
      test_follow_target.rates = [493.0, 494.0, 495.0]; // fieldtype: float  isarray: True 
      test_follow_target.position_cov = [577.0, 578.0, 579.0]; // fieldtype: float  isarray: True 
      test_follow_target.est_capabilities = 25; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //follow_target
 var t = new Buffer.from(test_follow_target.pack(mav));
   return [test_follow_target,t]; // return an array of unpacked and packed options
};
exports.test_follow_target = test_follow_target; // expose in module

let test_control_system_state = function () {
   if ( verbose == 2 ) console.log('test creating and packing:control_system_state'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:control_system_state          \r'); }
   var test_control_system_state = new mavlink20.messages.control_system_state(); 
      test_control_system_state.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_control_system_state.x_acc = 73.0; // fieldtype: float  isarray: False 
      test_control_system_state.y_acc = 101.0; // fieldtype: float  isarray: False 
      test_control_system_state.z_acc = 129.0; // fieldtype: float  isarray: False 
      test_control_system_state.x_vel = 157.0; // fieldtype: float  isarray: False 
      test_control_system_state.y_vel = 185.0; // fieldtype: float  isarray: False 
      test_control_system_state.z_vel = 213.0; // fieldtype: float  isarray: False 
      test_control_system_state.x_pos = 241.0; // fieldtype: float  isarray: False 
      test_control_system_state.y_pos = 269.0; // fieldtype: float  isarray: False 
      test_control_system_state.z_pos = 297.0; // fieldtype: float  isarray: False 
      test_control_system_state.airspeed = 325.0; // fieldtype: float  isarray: False 
      test_control_system_state.vel_variance = [353.0, 354.0, 355.0]; // fieldtype: float  isarray: True 
      test_control_system_state.pos_variance = [437.0, 438.0, 439.0]; // fieldtype: float  isarray: True 
      test_control_system_state.q = [521.0, 522.0, 523.0, 524.0]; // fieldtype: float  isarray: True 
      test_control_system_state.roll_rate = 633.0; // fieldtype: float  isarray: False 
      test_control_system_state.pitch_rate = 661.0; // fieldtype: float  isarray: False 
      test_control_system_state.yaw_rate = 689.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //control_system_state
 var t = new Buffer.from(test_control_system_state.pack(mav));
   return [test_control_system_state,t]; // return an array of unpacked and packed options
};
exports.test_control_system_state = test_control_system_state; // expose in module

let test_battery_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:battery_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:battery_status          \r'); }
   var test_battery_status = new mavlink20.messages.battery_status(); 
      test_battery_status.current_consumed = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_battery_status.energy_consumed = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_battery_status.temperature = (new Int16Array([17651]))[0]; // fieldtype: int16_t  isarray: False 
      test_battery_status.voltages = [17755, 17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17764]; // fieldtype: uint16_t  isarray: True 
      test_battery_status.current_battery = (new Int16Array([18795]))[0]; // fieldtype: int16_t  isarray: False 
      test_battery_status.id = 101; // fieldtype: uint8_t  isarray: False 
      test_battery_status.battery_function = 168; // fieldtype: uint8_t  isarray: False 
      test_battery_status.type = 235; // fieldtype: uint8_t  isarray: False 
      test_battery_status.battery_remaining = (new Int8Array([46]))[0]; // fieldtype: int8_t  isarray: False 
      test_battery_status.time_remaining = (new Int32Array([963499336]))[0]; // fieldtype: int32_t  isarray: False 
      test_battery_status.charge_state = 125; // fieldtype: uint8_t  isarray: False 
      test_battery_status.voltages_ext = [19367, 19368, 19369, 19370]; // fieldtype: uint16_t  isarray: True 
      test_battery_status.mode = 216; // fieldtype: uint8_t  isarray: False 
      test_battery_status.fault_bitmask = 963500064; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //battery_status
 var t = new Buffer.from(test_battery_status.pack(mav));
   return [test_battery_status,t]; // return an array of unpacked and packed options
};
exports.test_battery_status = test_battery_status; // expose in module

let test_autopilot_version = function () {
   if ( verbose == 2 ) console.log('test creating and packing:autopilot_version'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:autopilot_version          \r'); }
   var test_autopilot_version = new mavlink20.messages.autopilot_version(); 
      test_autopilot_version.capabilities = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_autopilot_version.uid = wrap_long(Long.fromString("93372036854776311", true)); // fieldtype: uint64_t  isarray: False 
      test_autopilot_version.flight_sw_version = 963498296; // fieldtype: uint32_t  isarray: False 
      test_autopilot_version.middleware_sw_version = 963498504; // fieldtype: uint32_t  isarray: False 
      test_autopilot_version.os_sw_version = 963498712; // fieldtype: uint32_t  isarray: False 
      test_autopilot_version.board_version = 963498920; // fieldtype: uint32_t  isarray: False 
      test_autopilot_version.vendor_id = 18899; // fieldtype: uint16_t  isarray: False 
      test_autopilot_version.product_id = 19003; // fieldtype: uint16_t  isarray: False 
      test_autopilot_version.flight_custom_version = new Buffer.from([113, 114, 115, 116, 117, 118, 119, 120]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_autopilot_version.middleware_custom_version = new Buffer.from([137, 138, 139, 140, 141, 142, 143, 144]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_autopilot_version.os_custom_version = new Buffer.from([161, 162, 163, 164, 165, 166, 167, 168]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_autopilot_version.uid2 = new Buffer.from([185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //autopilot_version
 var t = new Buffer.from(test_autopilot_version.pack(mav));
   return [test_autopilot_version,t]; // return an array of unpacked and packed options
};
exports.test_autopilot_version = test_autopilot_version; // expose in module

let test_landing_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:landing_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:landing_target          \r'); }
   var test_landing_target = new mavlink20.messages.landing_target(); 
      test_landing_target.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_landing_target.angle_x = 73.0; // fieldtype: float  isarray: False 
      test_landing_target.angle_y = 101.0; // fieldtype: float  isarray: False 
      test_landing_target.distance = 129.0; // fieldtype: float  isarray: False 
      test_landing_target.size_x = 157.0; // fieldtype: float  isarray: False 
      test_landing_target.size_y = 185.0; // fieldtype: float  isarray: False 
      test_landing_target.target_num = 89; // fieldtype: uint8_t  isarray: False 
      test_landing_target.frame = 156; // fieldtype: uint8_t  isarray: False 
      test_landing_target.x = 227.0; // fieldtype: float  isarray: False 
      test_landing_target.y = 255.0; // fieldtype: float  isarray: False 
      test_landing_target.z = 283.0; // fieldtype: float  isarray: False 
      test_landing_target.q = [311.0, 312.0, 313.0, 314.0]; // fieldtype: float  isarray: True 
      test_landing_target.type = 51; // fieldtype: uint8_t  isarray: False 
      test_landing_target.position_valid = 118; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //landing_target
 var t = new Buffer.from(test_landing_target.pack(mav));
   return [test_landing_target,t]; // return an array of unpacked and packed options
};
exports.test_landing_target = test_landing_target; // expose in module

let test_fence_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:fence_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:fence_status          \r'); }
   var test_fence_status = new mavlink20.messages.fence_status(); 
      test_fence_status.breach_time = 963497464; // fieldtype: uint32_t  isarray: False 
      test_fence_status.breach_count = 17443; // fieldtype: uint16_t  isarray: False 
      test_fence_status.breach_status = 151; // fieldtype: uint8_t  isarray: False 
      test_fence_status.breach_type = 218; // fieldtype: uint8_t  isarray: False 
      test_fence_status.breach_mitigation = 29; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //fence_status
 var t = new Buffer.from(test_fence_status.pack(mav));
   return [test_fence_status,t]; // return an array of unpacked and packed options
};
exports.test_fence_status = test_fence_status; // expose in module

let test_mag_cal_report = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mag_cal_report'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mag_cal_report          \r'); }
   var test_mag_cal_report = new mavlink20.messages.mag_cal_report(); 
      test_mag_cal_report.fitness = 17.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.ofs_x = 45.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.ofs_y = 73.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.ofs_z = 101.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.diag_x = 129.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.diag_y = 157.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.diag_z = 185.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.offdiag_x = 213.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.offdiag_y = 241.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.offdiag_z = 269.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.compass_id = 125; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.cal_mask = 192; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.cal_status = 3; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.autosaved = 70; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.orientation_confidence = 325.0; // fieldtype: float  isarray: False 
      test_mag_cal_report.old_orientation = 149; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.new_orientation = 216; // fieldtype: uint8_t  isarray: False 
      test_mag_cal_report.scale_factor = 367.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //mag_cal_report
 var t = new Buffer.from(test_mag_cal_report.pack(mav));
   return [test_mag_cal_report,t]; // return an array of unpacked and packed options
};
exports.test_mag_cal_report = test_mag_cal_report; // expose in module

let test_efi_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:efi_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:efi_status          \r'); }
   var test_efi_status = new mavlink20.messages.efi_status(); 
      test_efi_status.ecu_index = 17.0; // fieldtype: float  isarray: False 
      test_efi_status.rpm = 45.0; // fieldtype: float  isarray: False 
      test_efi_status.fuel_consumed = 73.0; // fieldtype: float  isarray: False 
      test_efi_status.fuel_flow = 101.0; // fieldtype: float  isarray: False 
      test_efi_status.engine_load = 129.0; // fieldtype: float  isarray: False 
      test_efi_status.throttle_position = 157.0; // fieldtype: float  isarray: False 
      test_efi_status.spark_dwell_time = 185.0; // fieldtype: float  isarray: False 
      test_efi_status.barometric_pressure = 213.0; // fieldtype: float  isarray: False 
      test_efi_status.intake_manifold_pressure = 241.0; // fieldtype: float  isarray: False 
      test_efi_status.intake_manifold_temperature = 269.0; // fieldtype: float  isarray: False 
      test_efi_status.cylinder_head_temperature = 297.0; // fieldtype: float  isarray: False 
      test_efi_status.ignition_timing = 325.0; // fieldtype: float  isarray: False 
      test_efi_status.injection_time = 353.0; // fieldtype: float  isarray: False 
      test_efi_status.exhaust_gas_temperature = 381.0; // fieldtype: float  isarray: False 
      test_efi_status.throttle_out = 409.0; // fieldtype: float  isarray: False 
      test_efi_status.pt_compensation = 437.0; // fieldtype: float  isarray: False 
      test_efi_status.health = 197; // fieldtype: uint8_t  isarray: False 
      test_efi_status.ignition_voltage = 472.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //efi_status
 var t = new Buffer.from(test_efi_status.pack(mav));
   return [test_efi_status,t]; // return an array of unpacked and packed options
};
exports.test_efi_status = test_efi_status; // expose in module

let test_estimator_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:estimator_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:estimator_status          \r'); }
   var test_estimator_status = new mavlink20.messages.estimator_status(); 
      test_estimator_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_estimator_status.vel_ratio = 73.0; // fieldtype: float  isarray: False 
      test_estimator_status.pos_horiz_ratio = 101.0; // fieldtype: float  isarray: False 
      test_estimator_status.pos_vert_ratio = 129.0; // fieldtype: float  isarray: False 
      test_estimator_status.mag_ratio = 157.0; // fieldtype: float  isarray: False 
      test_estimator_status.hagl_ratio = 185.0; // fieldtype: float  isarray: False 
      test_estimator_status.tas_ratio = 213.0; // fieldtype: float  isarray: False 
      test_estimator_status.pos_horiz_accuracy = 241.0; // fieldtype: float  isarray: False 
      test_estimator_status.pos_vert_accuracy = 269.0; // fieldtype: float  isarray: False 
      test_estimator_status.flags = 19315; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //estimator_status
 var t = new Buffer.from(test_estimator_status.pack(mav));
   return [test_estimator_status,t]; // return an array of unpacked and packed options
};
exports.test_estimator_status = test_estimator_status; // expose in module

let test_wind_cov = function () {
   if ( verbose == 2 ) console.log('test creating and packing:wind_cov'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:wind_cov          \r'); }
   var test_wind_cov = new mavlink20.messages.wind_cov(); 
      test_wind_cov.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_wind_cov.wind_x = 73.0; // fieldtype: float  isarray: False 
      test_wind_cov.wind_y = 101.0; // fieldtype: float  isarray: False 
      test_wind_cov.wind_z = 129.0; // fieldtype: float  isarray: False 
      test_wind_cov.var_horiz = 157.0; // fieldtype: float  isarray: False 
      test_wind_cov.var_vert = 185.0; // fieldtype: float  isarray: False 
      test_wind_cov.wind_alt = 213.0; // fieldtype: float  isarray: False 
      test_wind_cov.horiz_accuracy = 241.0; // fieldtype: float  isarray: False 
      test_wind_cov.vert_accuracy = 269.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //wind_cov
 var t = new Buffer.from(test_wind_cov.pack(mav));
   return [test_wind_cov,t]; // return an array of unpacked and packed options
};
exports.test_wind_cov = test_wind_cov; // expose in module

let test_gps_input = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_input'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_input          \r'); }
   var test_gps_input = new mavlink20.messages.gps_input(); 
      test_gps_input.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_gps_input.time_week_ms = 963497880; // fieldtype: uint32_t  isarray: False 
      test_gps_input.lat = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_input.lon = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_gps_input.alt = 157.0; // fieldtype: float  isarray: False 
      test_gps_input.hdop = 185.0; // fieldtype: float  isarray: False 
      test_gps_input.vdop = 213.0; // fieldtype: float  isarray: False 
      test_gps_input.vn = 241.0; // fieldtype: float  isarray: False 
      test_gps_input.ve = 269.0; // fieldtype: float  isarray: False 
      test_gps_input.vd = 297.0; // fieldtype: float  isarray: False 
      test_gps_input.speed_accuracy = 325.0; // fieldtype: float  isarray: False 
      test_gps_input.horiz_accuracy = 353.0; // fieldtype: float  isarray: False 
      test_gps_input.vert_accuracy = 381.0; // fieldtype: float  isarray: False 
      test_gps_input.ignore_flags = 20147; // fieldtype: uint16_t  isarray: False 
      test_gps_input.time_week = 20251; // fieldtype: uint16_t  isarray: False 
      test_gps_input.gps_id = 185; // fieldtype: uint8_t  isarray: False 
      test_gps_input.fix_type = 252; // fieldtype: uint8_t  isarray: False 
      test_gps_input.satellites_visible = 63; // fieldtype: uint8_t  isarray: False 
      test_gps_input.yaw = 20511; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //gps_input
 var t = new Buffer.from(test_gps_input.pack(mav));
   return [test_gps_input,t]; // return an array of unpacked and packed options
};
exports.test_gps_input = test_gps_input; // expose in module

let test_gps_rtcm_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gps_rtcm_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gps_rtcm_data          \r'); }
   var test_gps_rtcm_data = new mavlink20.messages.gps_rtcm_data(); 
      test_gps_rtcm_data.flags = 5; // fieldtype: uint8_t  isarray: False 
      test_gps_rtcm_data.len = 72; // fieldtype: uint8_t  isarray: False 
      test_gps_rtcm_data.data = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //gps_rtcm_data
 var t = new Buffer.from(test_gps_rtcm_data.pack(mav));
   return [test_gps_rtcm_data,t]; // return an array of unpacked and packed options
};
exports.test_gps_rtcm_data = test_gps_rtcm_data; // expose in module

let test_high_latency = function () {
   if ( verbose == 2 ) console.log('test creating and packing:high_latency'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:high_latency          \r'); }
   var test_high_latency = new mavlink20.messages.high_latency(); 
      test_high_latency.custom_mode = 963497464; // fieldtype: uint32_t  isarray: False 
      test_high_latency.latitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_high_latency.longitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_high_latency.roll = (new Int16Array([17859]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency.pitch = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency.heading = 18067; // fieldtype: uint16_t  isarray: False 
      test_high_latency.heading_sp = (new Int16Array([18171]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency.altitude_amsl = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency.altitude_sp = (new Int16Array([18379]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency.wp_distance = 18483; // fieldtype: uint16_t  isarray: False 
      test_high_latency.base_mode = 211; // fieldtype: uint8_t  isarray: False 
      test_high_latency.landed_state = 22; // fieldtype: uint8_t  isarray: False 
      test_high_latency.throttle = (new Int8Array([89]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency.airspeed = 156; // fieldtype: uint8_t  isarray: False 
      test_high_latency.airspeed_sp = 223; // fieldtype: uint8_t  isarray: False 
      test_high_latency.groundspeed = 34; // fieldtype: uint8_t  isarray: False 
      test_high_latency.climb_rate = (new Int8Array([101]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency.gps_nsat = 168; // fieldtype: uint8_t  isarray: False 
      test_high_latency.gps_fix_type = 235; // fieldtype: uint8_t  isarray: False 
      test_high_latency.battery_remaining = 46; // fieldtype: uint8_t  isarray: False 
      test_high_latency.temperature = (new Int8Array([113]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency.temperature_air = (new Int8Array([180]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency.failsafe = 247; // fieldtype: uint8_t  isarray: False 
      test_high_latency.wp_num = 58; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //high_latency
 var t = new Buffer.from(test_high_latency.pack(mav));
   return [test_high_latency,t]; // return an array of unpacked and packed options
};
exports.test_high_latency = test_high_latency; // expose in module

let test_high_latency2 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:high_latency2'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:high_latency2          \r'); }
   var test_high_latency2 = new mavlink20.messages.high_latency2(); 
      test_high_latency2.timestamp = 963497464; // fieldtype: uint32_t  isarray: False 
      test_high_latency2.latitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_high_latency2.longitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_high_latency2.custom_mode = 17859; // fieldtype: uint16_t  isarray: False 
      test_high_latency2.altitude = (new Int16Array([17963]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency2.target_altitude = (new Int16Array([18067]))[0]; // fieldtype: int16_t  isarray: False 
      test_high_latency2.target_distance = 18171; // fieldtype: uint16_t  isarray: False 
      test_high_latency2.wp_num = 18275; // fieldtype: uint16_t  isarray: False 
      test_high_latency2.failure_flags = 18379; // fieldtype: uint16_t  isarray: False 
      test_high_latency2.type = 77; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.autopilot = 144; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.heading = 211; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.target_heading = 22; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.throttle = 89; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.airspeed = 156; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.airspeed_sp = 223; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.groundspeed = 34; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.windspeed = 101; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.wind_heading = 168; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.eph = 235; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.epv = 46; // fieldtype: uint8_t  isarray: False 
      test_high_latency2.temperature_air = (new Int8Array([113]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency2.climb_rate = (new Int8Array([180]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency2.battery = (new Int8Array([247]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency2.custom0 = (new Int8Array([58]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency2.custom1 = (new Int8Array([125]))[0]; // fieldtype: int8_t  isarray: False 
      test_high_latency2.custom2 = (new Int8Array([192]))[0]; // fieldtype: int8_t  isarray: False 
 //var t = new Buffer.from([])
; //high_latency2
 var t = new Buffer.from(test_high_latency2.pack(mav));
   return [test_high_latency2,t]; // return an array of unpacked and packed options
};
exports.test_high_latency2 = test_high_latency2; // expose in module

let test_vibration = function () {
   if ( verbose == 2 ) console.log('test creating and packing:vibration'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:vibration          \r'); }
   var test_vibration = new mavlink20.messages.vibration(); 
      test_vibration.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_vibration.vibration_x = 73.0; // fieldtype: float  isarray: False 
      test_vibration.vibration_y = 101.0; // fieldtype: float  isarray: False 
      test_vibration.vibration_z = 129.0; // fieldtype: float  isarray: False 
      test_vibration.clipping_0 = 963498504; // fieldtype: uint32_t  isarray: False 
      test_vibration.clipping_1 = 963498712; // fieldtype: uint32_t  isarray: False 
      test_vibration.clipping_2 = 963498920; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //vibration
 var t = new Buffer.from(test_vibration.pack(mav));
   return [test_vibration,t]; // return an array of unpacked and packed options
};
exports.test_vibration = test_vibration; // expose in module

let test_home_position = function () {
   if ( verbose == 2 ) console.log('test creating and packing:home_position'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:home_position          \r'); }
   var test_home_position = new mavlink20.messages.home_position(); 
      test_home_position.latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_home_position.longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_home_position.altitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_home_position.x = 101.0; // fieldtype: float  isarray: False 
      test_home_position.y = 129.0; // fieldtype: float  isarray: False 
      test_home_position.z = 157.0; // fieldtype: float  isarray: False 
      test_home_position.q = [185.0, 186.0, 187.0, 188.0]; // fieldtype: float  isarray: True 
      test_home_position.approach_x = 297.0; // fieldtype: float  isarray: False 
      test_home_position.approach_y = 325.0; // fieldtype: float  isarray: False 
      test_home_position.approach_z = 353.0; // fieldtype: float  isarray: False 
      test_home_position.time_usec = wrap_long(Long.fromString("93372036854779083", true)); // fieldtype: uint64_t  isarray: False 
 //var t = new Buffer.from([])
; //home_position
 var t = new Buffer.from(test_home_position.pack(mav));
   return [test_home_position,t]; // return an array of unpacked and packed options
};
exports.test_home_position = test_home_position; // expose in module

let test_set_home_position = function () {
   if ( verbose == 2 ) console.log('test creating and packing:set_home_position'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:set_home_position          \r'); }
   var test_set_home_position = new mavlink20.messages.set_home_position(); 
      test_set_home_position.latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_home_position.longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_home_position.altitude = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_set_home_position.x = 101.0; // fieldtype: float  isarray: False 
      test_set_home_position.y = 129.0; // fieldtype: float  isarray: False 
      test_set_home_position.z = 157.0; // fieldtype: float  isarray: False 
      test_set_home_position.q = [185.0, 186.0, 187.0, 188.0]; // fieldtype: float  isarray: True 
      test_set_home_position.approach_x = 297.0; // fieldtype: float  isarray: False 
      test_set_home_position.approach_y = 325.0; // fieldtype: float  isarray: False 
      test_set_home_position.approach_z = 353.0; // fieldtype: float  isarray: False 
      test_set_home_position.target_system = 161; // fieldtype: uint8_t  isarray: False 
      test_set_home_position.time_usec = wrap_long(Long.fromString("93372036854779146", true)); // fieldtype: uint64_t  isarray: False 
 //var t = new Buffer.from([])
; //set_home_position
 var t = new Buffer.from(test_set_home_position.pack(mav));
   return [test_set_home_position,t]; // return an array of unpacked and packed options
};
exports.test_set_home_position = test_set_home_position; // expose in module

let test_message_interval = function () {
   if ( verbose == 2 ) console.log('test creating and packing:message_interval'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:message_interval          \r'); }
   var test_message_interval = new mavlink20.messages.message_interval(); 
      test_message_interval.interval_us = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_message_interval.message_id = 17443; // fieldtype: uint16_t  isarray: False 
 //var t = new Buffer.from([])
; //message_interval
 var t = new Buffer.from(test_message_interval.pack(mav));
   return [test_message_interval,t]; // return an array of unpacked and packed options
};
exports.test_message_interval = test_message_interval; // expose in module

let test_extended_sys_state = function () {
   if ( verbose == 2 ) console.log('test creating and packing:extended_sys_state'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:extended_sys_state          \r'); }
   var test_extended_sys_state = new mavlink20.messages.extended_sys_state(); 
      test_extended_sys_state.vtol_state = 5; // fieldtype: uint8_t  isarray: False 
      test_extended_sys_state.landed_state = 72; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //extended_sys_state
 var t = new Buffer.from(test_extended_sys_state.pack(mav));
   return [test_extended_sys_state,t]; // return an array of unpacked and packed options
};
exports.test_extended_sys_state = test_extended_sys_state; // expose in module

let test_adsb_vehicle = function () {
   if ( verbose == 2 ) console.log('test creating and packing:adsb_vehicle'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:adsb_vehicle          \r'); }
   var test_adsb_vehicle = new mavlink20.messages.adsb_vehicle(); 
      test_adsb_vehicle.ICAO_address = 963497464; // fieldtype: uint32_t  isarray: False 
      test_adsb_vehicle.lat = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_adsb_vehicle.lon = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_adsb_vehicle.altitude = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_adsb_vehicle.heading = 18067; // fieldtype: uint16_t  isarray: False 
      test_adsb_vehicle.hor_velocity = 18171; // fieldtype: uint16_t  isarray: False 
      test_adsb_vehicle.ver_velocity = (new Int16Array([18275]))[0]; // fieldtype: int16_t  isarray: False 
      test_adsb_vehicle.flags = 18379; // fieldtype: uint16_t  isarray: False 
      test_adsb_vehicle.squawk = 18483; // fieldtype: uint16_t  isarray: False 
      test_adsb_vehicle.altitude_type = 211; // fieldtype: uint8_t  isarray: False 
      test_adsb_vehicle.callsign = "BCDEFGHI"; // fieldtype: char  isarray: False 
      test_adsb_vehicle.emitter_type = 113; // fieldtype: uint8_t  isarray: False 
      test_adsb_vehicle.tslc = 180; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //adsb_vehicle
 var t = new Buffer.from(test_adsb_vehicle.pack(mav));
   return [test_adsb_vehicle,t]; // return an array of unpacked and packed options
};
exports.test_adsb_vehicle = test_adsb_vehicle; // expose in module

let test_collision = function () {
   if ( verbose == 2 ) console.log('test creating and packing:collision'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:collision          \r'); }
   var test_collision = new mavlink20.messages.collision(); 
      test_collision.id = 963497464; // fieldtype: uint32_t  isarray: False 
      test_collision.time_to_minimum_delta = 45.0; // fieldtype: float  isarray: False 
      test_collision.altitude_minimum_delta = 73.0; // fieldtype: float  isarray: False 
      test_collision.horizontal_minimum_delta = 101.0; // fieldtype: float  isarray: False 
      test_collision.src = 53; // fieldtype: uint8_t  isarray: False 
      test_collision.action = 120; // fieldtype: uint8_t  isarray: False 
      test_collision.threat_level = 187; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //collision
 var t = new Buffer.from(test_collision.pack(mav));
   return [test_collision,t]; // return an array of unpacked and packed options
};
exports.test_collision = test_collision; // expose in module

let test_v2_extension = function () {
   if ( verbose == 2 ) console.log('test creating and packing:v2_extension'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:v2_extension          \r'); }
   var test_v2_extension = new mavlink20.messages.v2_extension(); 
      test_v2_extension.message_type = 17235; // fieldtype: uint16_t  isarray: False 
      test_v2_extension.target_network = 139; // fieldtype: uint8_t  isarray: False 
      test_v2_extension.target_system = 206; // fieldtype: uint8_t  isarray: False 
      test_v2_extension.target_component = 17; // fieldtype: uint8_t  isarray: False 
      test_v2_extension.payload = new Buffer.from([84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //v2_extension
 var t = new Buffer.from(test_v2_extension.pack(mav));
   return [test_v2_extension,t]; // return an array of unpacked and packed options
};
exports.test_v2_extension = test_v2_extension; // expose in module

let test_memory_vect = function () {
   if ( verbose == 2 ) console.log('test creating and packing:memory_vect'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:memory_vect          \r'); }
   var test_memory_vect = new mavlink20.messages.memory_vect(); 
      test_memory_vect.address = 17235; // fieldtype: uint16_t  isarray: False 
      test_memory_vect.ver = 139; // fieldtype: uint8_t  isarray: False 
      test_memory_vect.type = 206; // fieldtype: uint8_t  isarray: False 
      test_memory_vect.value = new Buffer.from([17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48]).toString("binary"); // fieldtype: int8_t  isarray: True 
 //var t = new Buffer.from([])
; //memory_vect
 var t = new Buffer.from(test_memory_vect.pack(mav));
   return [test_memory_vect,t]; // return an array of unpacked and packed options
};
exports.test_memory_vect = test_memory_vect; // expose in module

let test_debug_vect = function () {
   if ( verbose == 2 ) console.log('test creating and packing:debug_vect'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:debug_vect          \r'); }
   var test_debug_vect = new mavlink20.messages.debug_vect(); 
      test_debug_vect.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_debug_vect.x = 73.0; // fieldtype: float  isarray: False 
      test_debug_vect.y = 101.0; // fieldtype: float  isarray: False 
      test_debug_vect.z = 129.0; // fieldtype: float  isarray: False 
      test_debug_vect.name = "UVWXYZABC"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //debug_vect
 var t = new Buffer.from(test_debug_vect.pack(mav));
   return [test_debug_vect,t]; // return an array of unpacked and packed options
};
exports.test_debug_vect = test_debug_vect; // expose in module

let test_named_value_float = function () {
   if ( verbose == 2 ) console.log('test creating and packing:named_value_float'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:named_value_float          \r'); }
   var test_named_value_float = new mavlink20.messages.named_value_float(); 
      test_named_value_float.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_named_value_float.value = 45.0; // fieldtype: float  isarray: False 
      test_named_value_float.name = "IJKLMNOPQ"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //named_value_float
 var t = new Buffer.from(test_named_value_float.pack(mav));
   return [test_named_value_float,t]; // return an array of unpacked and packed options
};
exports.test_named_value_float = test_named_value_float; // expose in module

let test_named_value_int = function () {
   if ( verbose == 2 ) console.log('test creating and packing:named_value_int'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:named_value_int          \r'); }
   var test_named_value_int = new mavlink20.messages.named_value_int(); 
      test_named_value_int.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_named_value_int.value = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_named_value_int.name = "IJKLMNOPQ"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //named_value_int
 var t = new Buffer.from(test_named_value_int.pack(mav));
   return [test_named_value_int,t]; // return an array of unpacked and packed options
};
exports.test_named_value_int = test_named_value_int; // expose in module

let test_statustext = function () {
   if ( verbose == 2 ) console.log('test creating and packing:statustext'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:statustext          \r'); }
   var test_statustext = new mavlink20.messages.statustext(); 
      test_statustext.severity = 5; // fieldtype: uint8_t  isarray: False 
      test_statustext.text = "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWX"; // fieldtype: char  isarray: False 
      test_statustext.id = 19887; // fieldtype: uint16_t  isarray: False 
      test_statustext.chunk_seq = 228; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //statustext
 var t = new Buffer.from(test_statustext.pack(mav));
   return [test_statustext,t]; // return an array of unpacked and packed options
};
exports.test_statustext = test_statustext; // expose in module

let test_debug = function () {
   if ( verbose == 2 ) console.log('test creating and packing:debug'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:debug          \r'); }
   var test_debug = new mavlink20.messages.debug(); 
      test_debug.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_debug.value = 45.0; // fieldtype: float  isarray: False 
      test_debug.ind = 29; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //debug
 var t = new Buffer.from(test_debug.pack(mav));
   return [test_debug,t]; // return an array of unpacked and packed options
};
exports.test_debug = test_debug; // expose in module

let test_setup_signing = function () {
   if ( verbose == 2 ) console.log('test creating and packing:setup_signing'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:setup_signing          \r'); }
   var test_setup_signing = new mavlink20.messages.setup_signing(); 
      test_setup_signing.initial_timestamp = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_setup_signing.target_system = 29; // fieldtype: uint8_t  isarray: False 
      test_setup_signing.target_component = 96; // fieldtype: uint8_t  isarray: False 
      test_setup_signing.secret_key = new Buffer.from([163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //setup_signing
 var t = new Buffer.from(test_setup_signing.pack(mav));
   return [test_setup_signing,t]; // return an array of unpacked and packed options
};
exports.test_setup_signing = test_setup_signing; // expose in module

let test_button_change = function () {
   if ( verbose == 2 ) console.log('test creating and packing:button_change'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:button_change          \r'); }
   var test_button_change = new mavlink20.messages.button_change(); 
      test_button_change.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_button_change.last_change_ms = 963497672; // fieldtype: uint32_t  isarray: False 
      test_button_change.state = 29; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //button_change
 var t = new Buffer.from(test_button_change.pack(mav));
   return [test_button_change,t]; // return an array of unpacked and packed options
};
exports.test_button_change = test_button_change; // expose in module

let test_play_tune = function () {
   if ( verbose == 2 ) console.log('test creating and packing:play_tune'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:play_tune          \r'); }
   var test_play_tune = new mavlink20.messages.play_tune(); 
      test_play_tune.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_play_tune.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_play_tune.tune = "CDEFGHIJKLMNOPQRSTUVWXYZABCDE"; // fieldtype: char  isarray: False 
      test_play_tune.tune2 = "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVW"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //play_tune
 var t = new Buffer.from(test_play_tune.pack(mav));
   return [test_play_tune,t]; // return an array of unpacked and packed options
};
exports.test_play_tune = test_play_tune; // expose in module

let test_camera_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_information          \r'); }
   var test_camera_information = new mavlink20.messages.camera_information(); 
      test_camera_information.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_camera_information.firmware_version = 963497672; // fieldtype: uint32_t  isarray: False 
      test_camera_information.focal_length = 73.0; // fieldtype: float  isarray: False 
      test_camera_information.sensor_size_h = 101.0; // fieldtype: float  isarray: False 
      test_camera_information.sensor_size_v = 129.0; // fieldtype: float  isarray: False 
      test_camera_information.flags = 963498504; // fieldtype: uint32_t  isarray: False 
      test_camera_information.resolution_h = 18483; // fieldtype: uint16_t  isarray: False 
      test_camera_information.resolution_v = 18587; // fieldtype: uint16_t  isarray: False 
      test_camera_information.cam_definition_version = 18691; // fieldtype: uint16_t  isarray: False 
      test_camera_information.vendor_name = new Buffer.from([223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_camera_information.model_name = new Buffer.from([63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_camera_information.lens_id = 159; // fieldtype: uint8_t  isarray: False 
      test_camera_information.cam_definition_uri = "RSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //camera_information
 var t = new Buffer.from(test_camera_information.pack(mav));
   return [test_camera_information,t]; // return an array of unpacked and packed options
};
exports.test_camera_information = test_camera_information; // expose in module

let test_camera_settings = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_settings'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_settings          \r'); }
   var test_camera_settings = new mavlink20.messages.camera_settings(); 
      test_camera_settings.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_camera_settings.mode_id = 17; // fieldtype: uint8_t  isarray: False 
      test_camera_settings.zoomLevel = 52.0; // fieldtype: float  isarray: False 
      test_camera_settings.focusLevel = 80.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //camera_settings
 var t = new Buffer.from(test_camera_settings.pack(mav));
   return [test_camera_settings,t]; // return an array of unpacked and packed options
};
exports.test_camera_settings = test_camera_settings; // expose in module

let test_storage_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:storage_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:storage_information          \r'); }
   var test_storage_information = new mavlink20.messages.storage_information(); 
      test_storage_information.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_storage_information.total_capacity = 45.0; // fieldtype: float  isarray: False 
      test_storage_information.used_capacity = 73.0; // fieldtype: float  isarray: False 
      test_storage_information.available_capacity = 101.0; // fieldtype: float  isarray: False 
      test_storage_information.read_speed = 129.0; // fieldtype: float  isarray: False 
      test_storage_information.write_speed = 157.0; // fieldtype: float  isarray: False 
      test_storage_information.storage_id = 77; // fieldtype: uint8_t  isarray: False 
      test_storage_information.storage_count = 144; // fieldtype: uint8_t  isarray: False 
      test_storage_information.status = 211; // fieldtype: uint8_t  isarray: False 
      test_storage_information.type = 22; // fieldtype: uint8_t  isarray: False 
      test_storage_information.name = "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFG"; // fieldtype: char  isarray: False 
      test_storage_information.storage_usage = 185; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //storage_information
 var t = new Buffer.from(test_storage_information.pack(mav));
   return [test_storage_information,t]; // return an array of unpacked and packed options
};
exports.test_storage_information = test_storage_information; // expose in module

let test_camera_capture_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_capture_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_capture_status          \r'); }
   var test_camera_capture_status = new mavlink20.messages.camera_capture_status(); 
      test_camera_capture_status.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_camera_capture_status.image_interval = 45.0; // fieldtype: float  isarray: False 
      test_camera_capture_status.recording_time_ms = 963497880; // fieldtype: uint32_t  isarray: False 
      test_camera_capture_status.available_capacity = 101.0; // fieldtype: float  isarray: False 
      test_camera_capture_status.image_status = 53; // fieldtype: uint8_t  isarray: False 
      test_camera_capture_status.video_status = 120; // fieldtype: uint8_t  isarray: False 
      test_camera_capture_status.image_count = (new Int32Array([963498400]))[0]; // fieldtype: int32_t  isarray: False 
 //var t = new Buffer.from([])
; //camera_capture_status
 var t = new Buffer.from(test_camera_capture_status.pack(mav));
   return [test_camera_capture_status,t]; // return an array of unpacked and packed options
};
exports.test_camera_capture_status = test_camera_capture_status; // expose in module

let test_camera_image_captured = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_image_captured'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_image_captured          \r'); }
   var test_camera_image_captured = new mavlink20.messages.camera_image_captured(); 
      test_camera_image_captured.time_utc = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_camera_image_captured.time_boot_ms = 963497880; // fieldtype: uint32_t  isarray: False 
      test_camera_image_captured.lat = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_image_captured.lon = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_image_captured.alt = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_image_captured.relative_alt = (new Int32Array([963498712]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_image_captured.q = [213.0, 214.0, 215.0, 216.0]; // fieldtype: float  isarray: True 
      test_camera_image_captured.image_index = (new Int32Array([963499752]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_image_captured.camera_id = 149; // fieldtype: uint8_t  isarray: False 
      test_camera_image_captured.capture_result = (new Int8Array([216]))[0]; // fieldtype: int8_t  isarray: False 
      test_camera_image_captured.file_url = "YZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRST"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //camera_image_captured
 var t = new Buffer.from(test_camera_image_captured.pack(mav));
   return [test_camera_image_captured,t]; // return an array of unpacked and packed options
};
exports.test_camera_image_captured = test_camera_image_captured; // expose in module

let test_flight_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:flight_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:flight_information          \r'); }
   var test_flight_information = new mavlink20.messages.flight_information(); 
      test_flight_information.arming_time_utc = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_flight_information.takeoff_time_utc = wrap_long(Long.fromString("93372036854776311", true)); // fieldtype: uint64_t  isarray: False 
      test_flight_information.flight_uuid = wrap_long(Long.fromString("93372036854776815", true)); // fieldtype: uint64_t  isarray: False 
      test_flight_information.time_boot_ms = 963498712; // fieldtype: uint32_t  isarray: False 
 //var t = new Buffer.from([])
; //flight_information
 var t = new Buffer.from(test_flight_information.pack(mav));
   return [test_flight_information,t]; // return an array of unpacked and packed options
};
exports.test_flight_information = test_flight_information; // expose in module

let test_mount_orientation = function () {
   if ( verbose == 2 ) console.log('test creating and packing:mount_orientation'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:mount_orientation          \r'); }
   var test_mount_orientation = new mavlink20.messages.mount_orientation(); 
      test_mount_orientation.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_mount_orientation.roll = 45.0; // fieldtype: float  isarray: False 
      test_mount_orientation.pitch = 73.0; // fieldtype: float  isarray: False 
      test_mount_orientation.yaw = 101.0; // fieldtype: float  isarray: False 
      test_mount_orientation.yaw_absolute = 129.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //mount_orientation
 var t = new Buffer.from(test_mount_orientation.pack(mav));
   return [test_mount_orientation,t]; // return an array of unpacked and packed options
};
exports.test_mount_orientation = test_mount_orientation; // expose in module

let test_logging_data = function () {
   if ( verbose == 2 ) console.log('test creating and packing:logging_data'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:logging_data          \r'); }
   var test_logging_data = new mavlink20.messages.logging_data(); 
      test_logging_data.sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_logging_data.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_logging_data.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_logging_data.length = 17; // fieldtype: uint8_t  isarray: False 
      test_logging_data.first_message_offset = 84; // fieldtype: uint8_t  isarray: False 
      test_logging_data.data = new Buffer.from([151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //logging_data
 var t = new Buffer.from(test_logging_data.pack(mav));
   return [test_logging_data,t]; // return an array of unpacked and packed options
};
exports.test_logging_data = test_logging_data; // expose in module

let test_logging_data_acked = function () {
   if ( verbose == 2 ) console.log('test creating and packing:logging_data_acked'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:logging_data_acked          \r'); }
   var test_logging_data_acked = new mavlink20.messages.logging_data_acked(); 
      test_logging_data_acked.sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_logging_data_acked.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_logging_data_acked.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_logging_data_acked.length = 17; // fieldtype: uint8_t  isarray: False 
      test_logging_data_acked.first_message_offset = 84; // fieldtype: uint8_t  isarray: False 
      test_logging_data_acked.data = new Buffer.from([151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //logging_data_acked
 var t = new Buffer.from(test_logging_data_acked.pack(mav));
   return [test_logging_data_acked,t]; // return an array of unpacked and packed options
};
exports.test_logging_data_acked = test_logging_data_acked; // expose in module

let test_logging_ack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:logging_ack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:logging_ack          \r'); }
   var test_logging_ack = new mavlink20.messages.logging_ack(); 
      test_logging_ack.sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_logging_ack.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_logging_ack.target_component = 206; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //logging_ack
 var t = new Buffer.from(test_logging_ack.pack(mav));
   return [test_logging_ack,t]; // return an array of unpacked and packed options
};
exports.test_logging_ack = test_logging_ack; // expose in module

let test_video_stream_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:video_stream_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:video_stream_information          \r'); }
   var test_video_stream_information = new mavlink20.messages.video_stream_information(); 
      test_video_stream_information.framerate = 17.0; // fieldtype: float  isarray: False 
      test_video_stream_information.bitrate = 963497672; // fieldtype: uint32_t  isarray: False 
      test_video_stream_information.flags = 17651; // fieldtype: uint16_t  isarray: False 
      test_video_stream_information.resolution_h = 17755; // fieldtype: uint16_t  isarray: False 
      test_video_stream_information.resolution_v = 17859; // fieldtype: uint16_t  isarray: False 
      test_video_stream_information.rotation = 17963; // fieldtype: uint16_t  isarray: False 
      test_video_stream_information.hfov = 18067; // fieldtype: uint16_t  isarray: False 
      test_video_stream_information.stream_id = 187; // fieldtype: uint8_t  isarray: False 
      test_video_stream_information.count = 254; // fieldtype: uint8_t  isarray: False 
      test_video_stream_information.type = 65; // fieldtype: uint8_t  isarray: False 
      test_video_stream_information.name = "VWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ"; // fieldtype: char  isarray: False 
      test_video_stream_information.uri = "BCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCD"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //video_stream_information
 var t = new Buffer.from(test_video_stream_information.pack(mav));
   return [test_video_stream_information,t]; // return an array of unpacked and packed options
};
exports.test_video_stream_information = test_video_stream_information; // expose in module

let test_video_stream_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:video_stream_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:video_stream_status          \r'); }
   var test_video_stream_status = new mavlink20.messages.video_stream_status(); 
      test_video_stream_status.framerate = 17.0; // fieldtype: float  isarray: False 
      test_video_stream_status.bitrate = 963497672; // fieldtype: uint32_t  isarray: False 
      test_video_stream_status.flags = 17651; // fieldtype: uint16_t  isarray: False 
      test_video_stream_status.resolution_h = 17755; // fieldtype: uint16_t  isarray: False 
      test_video_stream_status.resolution_v = 17859; // fieldtype: uint16_t  isarray: False 
      test_video_stream_status.rotation = 17963; // fieldtype: uint16_t  isarray: False 
      test_video_stream_status.hfov = 18067; // fieldtype: uint16_t  isarray: False 
      test_video_stream_status.stream_id = 187; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //video_stream_status
 var t = new Buffer.from(test_video_stream_status.pack(mav));
   return [test_video_stream_status,t]; // return an array of unpacked and packed options
};
exports.test_video_stream_status = test_video_stream_status; // expose in module

let test_camera_fov_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_fov_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_fov_status          \r'); }
   var test_camera_fov_status = new mavlink20.messages.camera_fov_status(); 
      test_camera_fov_status.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_camera_fov_status.lat_camera = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.lon_camera = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.alt_camera = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.lat_image = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.lon_image = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.alt_image = (new Int32Array([963498712]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_fov_status.q = [213.0, 214.0, 215.0, 216.0]; // fieldtype: float  isarray: True 
      test_camera_fov_status.hfov = 325.0; // fieldtype: float  isarray: False 
      test_camera_fov_status.vfov = 353.0; // fieldtype: float  isarray: False 
 //var t = new Buffer.from([])
; //camera_fov_status
 var t = new Buffer.from(test_camera_fov_status.pack(mav));
   return [test_camera_fov_status,t]; // return an array of unpacked and packed options
};
exports.test_camera_fov_status = test_camera_fov_status; // expose in module

let test_camera_tracking_image_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_tracking_image_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_tracking_image_status          \r'); }
   var test_camera_tracking_image_status = new mavlink20.messages.camera_tracking_image_status(); 
      test_camera_tracking_image_status.point_x = 17.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.point_y = 45.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.radius = 73.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.rec_top_x = 101.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.rec_top_y = 129.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.rec_bottom_x = 157.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.rec_bottom_y = 185.0; // fieldtype: float  isarray: False 
      test_camera_tracking_image_status.tracking_status = 89; // fieldtype: uint8_t  isarray: False 
      test_camera_tracking_image_status.tracking_mode = 156; // fieldtype: uint8_t  isarray: False 
      test_camera_tracking_image_status.target_data = 223; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //camera_tracking_image_status
 var t = new Buffer.from(test_camera_tracking_image_status.pack(mav));
   return [test_camera_tracking_image_status,t]; // return an array of unpacked and packed options
};
exports.test_camera_tracking_image_status = test_camera_tracking_image_status; // expose in module

let test_camera_tracking_geo_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:camera_tracking_geo_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:camera_tracking_geo_status          \r'); }
   var test_camera_tracking_geo_status = new mavlink20.messages.camera_tracking_geo_status(); 
      test_camera_tracking_geo_status.lat = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_tracking_geo_status.lon = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_camera_tracking_geo_status.alt = 73.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.h_acc = 101.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.v_acc = 129.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.vel_n = 157.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.vel_e = 185.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.vel_d = 213.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.vel_acc = 241.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.dist = 269.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.hdg = 297.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.hdg_acc = 325.0; // fieldtype: float  isarray: False 
      test_camera_tracking_geo_status.tracking_status = 149; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //camera_tracking_geo_status
 var t = new Buffer.from(test_camera_tracking_geo_status.pack(mav));
   return [test_camera_tracking_geo_status,t]; // return an array of unpacked and packed options
};
exports.test_camera_tracking_geo_status = test_camera_tracking_geo_status; // expose in module

let test_gimbal_manager_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_manager_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_manager_information          \r'); }
   var test_gimbal_manager_information = new mavlink20.messages.gimbal_manager_information(); 
      test_gimbal_manager_information.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_information.cap_flags = 963497672; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_information.roll_min = 73.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.roll_max = 101.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.pitch_min = 129.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.pitch_max = 157.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.yaw_min = 185.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.yaw_max = 213.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_information.gimbal_device_id = 101; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_manager_information
 var t = new Buffer.from(test_gimbal_manager_information.pack(mav));
   return [test_gimbal_manager_information,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_manager_information = test_gimbal_manager_information; // expose in module

let test_gimbal_manager_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_manager_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_manager_status          \r'); }
   var test_gimbal_manager_status = new mavlink20.messages.gimbal_manager_status(); 
      test_gimbal_manager_status.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_status.flags = 963497672; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_status.gimbal_device_id = 29; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_status.primary_control_sysid = 96; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_status.primary_control_compid = 163; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_status.secondary_control_sysid = 230; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_status.secondary_control_compid = 41; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_manager_status
 var t = new Buffer.from(test_gimbal_manager_status.pack(mav));
   return [test_gimbal_manager_status,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_manager_status = test_gimbal_manager_status; // expose in module

let test_gimbal_manager_set_attitude = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_manager_set_attitude'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_manager_set_attitude          \r'); }
   var test_gimbal_manager_set_attitude = new mavlink20.messages.gimbal_manager_set_attitude(); 
      test_gimbal_manager_set_attitude.flags = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_set_attitude.q = [45.0, 46.0, 47.0, 48.0]; // fieldtype: float  isarray: True 
      test_gimbal_manager_set_attitude.angular_velocity_x = 157.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_attitude.angular_velocity_y = 185.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_attitude.angular_velocity_z = 213.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_attitude.target_system = 101; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_attitude.target_component = 168; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_attitude.gimbal_device_id = 235; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_manager_set_attitude
 var t = new Buffer.from(test_gimbal_manager_set_attitude.pack(mav));
   return [test_gimbal_manager_set_attitude,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_manager_set_attitude = test_gimbal_manager_set_attitude; // expose in module

let test_gimbal_device_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_device_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_device_information          \r'); }
   var test_gimbal_device_information = new mavlink20.messages.gimbal_device_information(); 
      test_gimbal_device_information.uid = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_gimbal_device_information.time_boot_ms = 963497880; // fieldtype: uint32_t  isarray: False 
      test_gimbal_device_information.firmware_version = 963498088; // fieldtype: uint32_t  isarray: False 
      test_gimbal_device_information.hardware_version = 963498296; // fieldtype: uint32_t  isarray: False 
      test_gimbal_device_information.roll_min = 157.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.roll_max = 185.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.pitch_min = 213.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.pitch_max = 241.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.yaw_min = 269.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.yaw_max = 297.0; // fieldtype: float  isarray: False 
      test_gimbal_device_information.cap_flags = 19523; // fieldtype: uint16_t  isarray: False 
      test_gimbal_device_information.custom_cap_flags = 19627; // fieldtype: uint16_t  isarray: False 
      test_gimbal_device_information.vendor_name = "WXYZABCDEFGHIJKLMNOPQRSTUVWXYZA"; // fieldtype: char  isarray: False 
      test_gimbal_device_information.model_name = "CDEFGHIJKLMNOPQRSTUVWXYZABCDEFG"; // fieldtype: char  isarray: False 
      test_gimbal_device_information.custom_name = "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLM"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_device_information
 var t = new Buffer.from(test_gimbal_device_information.pack(mav));
   return [test_gimbal_device_information,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_device_information = test_gimbal_device_information; // expose in module

let test_gimbal_device_set_attitude = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_device_set_attitude'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_device_set_attitude          \r'); }
   var test_gimbal_device_set_attitude = new mavlink20.messages.gimbal_device_set_attitude(); 
      test_gimbal_device_set_attitude.q = [17.0, 18.0, 19.0, 20.0]; // fieldtype: float  isarray: True 
      test_gimbal_device_set_attitude.angular_velocity_x = 129.0; // fieldtype: float  isarray: False 
      test_gimbal_device_set_attitude.angular_velocity_y = 157.0; // fieldtype: float  isarray: False 
      test_gimbal_device_set_attitude.angular_velocity_z = 185.0; // fieldtype: float  isarray: False 
      test_gimbal_device_set_attitude.flags = 18691; // fieldtype: uint16_t  isarray: False 
      test_gimbal_device_set_attitude.target_system = 223; // fieldtype: uint8_t  isarray: False 
      test_gimbal_device_set_attitude.target_component = 34; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_device_set_attitude
 var t = new Buffer.from(test_gimbal_device_set_attitude.pack(mav));
   return [test_gimbal_device_set_attitude,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_device_set_attitude = test_gimbal_device_set_attitude; // expose in module

let test_gimbal_device_attitude_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_device_attitude_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_device_attitude_status          \r'); }
   var test_gimbal_device_attitude_status = new mavlink20.messages.gimbal_device_attitude_status(); 
      test_gimbal_device_attitude_status.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_device_attitude_status.q = [45.0, 46.0, 47.0, 48.0]; // fieldtype: float  isarray: True 
      test_gimbal_device_attitude_status.angular_velocity_x = 157.0; // fieldtype: float  isarray: False 
      test_gimbal_device_attitude_status.angular_velocity_y = 185.0; // fieldtype: float  isarray: False 
      test_gimbal_device_attitude_status.angular_velocity_z = 213.0; // fieldtype: float  isarray: False 
      test_gimbal_device_attitude_status.failure_flags = 963499128; // fieldtype: uint32_t  isarray: False 
      test_gimbal_device_attitude_status.flags = 19107; // fieldtype: uint16_t  isarray: False 
      test_gimbal_device_attitude_status.target_system = 247; // fieldtype: uint8_t  isarray: False 
      test_gimbal_device_attitude_status.target_component = 58; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_device_attitude_status
 var t = new Buffer.from(test_gimbal_device_attitude_status.pack(mav));
   return [test_gimbal_device_attitude_status,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_device_attitude_status = test_gimbal_device_attitude_status; // expose in module

let test_autopilot_state_for_gimbal_device = function () {
   if ( verbose == 2 ) console.log('test creating and packing:autopilot_state_for_gimbal_device'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:autopilot_state_for_gimbal_device          \r'); }
   var test_autopilot_state_for_gimbal_device = new mavlink20.messages.autopilot_state_for_gimbal_device(); 
      test_autopilot_state_for_gimbal_device.time_boot_us = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_autopilot_state_for_gimbal_device.q = [73.0, 74.0, 75.0, 76.0]; // fieldtype: float  isarray: True 
      test_autopilot_state_for_gimbal_device.q_estimated_delay_us = 963498712; // fieldtype: uint32_t  isarray: False 
      test_autopilot_state_for_gimbal_device.vx = 213.0; // fieldtype: float  isarray: False 
      test_autopilot_state_for_gimbal_device.vy = 241.0; // fieldtype: float  isarray: False 
      test_autopilot_state_for_gimbal_device.vz = 269.0; // fieldtype: float  isarray: False 
      test_autopilot_state_for_gimbal_device.v_estimated_delay_us = 963499544; // fieldtype: uint32_t  isarray: False 
      test_autopilot_state_for_gimbal_device.feed_forward_angular_velocity_z = 325.0; // fieldtype: float  isarray: False 
      test_autopilot_state_for_gimbal_device.estimator_status = 19731; // fieldtype: uint16_t  isarray: False 
      test_autopilot_state_for_gimbal_device.target_system = 27; // fieldtype: uint8_t  isarray: False 
      test_autopilot_state_for_gimbal_device.target_component = 94; // fieldtype: uint8_t  isarray: False 
      test_autopilot_state_for_gimbal_device.landed_state = 161; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //autopilot_state_for_gimbal_device
 var t = new Buffer.from(test_autopilot_state_for_gimbal_device.pack(mav));
   return [test_autopilot_state_for_gimbal_device,t]; // return an array of unpacked and packed options
};
exports.test_autopilot_state_for_gimbal_device = test_autopilot_state_for_gimbal_device; // expose in module

let test_gimbal_manager_set_pitchyaw = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_manager_set_pitchyaw'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_manager_set_pitchyaw          \r'); }
   var test_gimbal_manager_set_pitchyaw = new mavlink20.messages.gimbal_manager_set_pitchyaw(); 
      test_gimbal_manager_set_pitchyaw.flags = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_set_pitchyaw.pitch = 45.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_pitchyaw.yaw = 73.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_pitchyaw.pitch_rate = 101.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_pitchyaw.yaw_rate = 129.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_pitchyaw.target_system = 65; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_pitchyaw.target_component = 132; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_pitchyaw.gimbal_device_id = 199; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_manager_set_pitchyaw
 var t = new Buffer.from(test_gimbal_manager_set_pitchyaw.pack(mav));
   return [test_gimbal_manager_set_pitchyaw,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_manager_set_pitchyaw = test_gimbal_manager_set_pitchyaw; // expose in module

let test_gimbal_manager_set_manual_control = function () {
   if ( verbose == 2 ) console.log('test creating and packing:gimbal_manager_set_manual_control'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:gimbal_manager_set_manual_control          \r'); }
   var test_gimbal_manager_set_manual_control = new mavlink20.messages.gimbal_manager_set_manual_control(); 
      test_gimbal_manager_set_manual_control.flags = 963497464; // fieldtype: uint32_t  isarray: False 
      test_gimbal_manager_set_manual_control.pitch = 45.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_manual_control.yaw = 73.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_manual_control.pitch_rate = 101.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_manual_control.yaw_rate = 129.0; // fieldtype: float  isarray: False 
      test_gimbal_manager_set_manual_control.target_system = 65; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_manual_control.target_component = 132; // fieldtype: uint8_t  isarray: False 
      test_gimbal_manager_set_manual_control.gimbal_device_id = 199; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //gimbal_manager_set_manual_control
 var t = new Buffer.from(test_gimbal_manager_set_manual_control.pack(mav));
   return [test_gimbal_manager_set_manual_control,t]; // return an array of unpacked and packed options
};
exports.test_gimbal_manager_set_manual_control = test_gimbal_manager_set_manual_control; // expose in module

let test_esc_info = function () {
   if ( verbose == 2 ) console.log('test creating and packing:esc_info'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:esc_info          \r'); }
   var test_esc_info = new mavlink20.messages.esc_info(); 
      test_esc_info.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_esc_info.error_count = [963497880, 963497881, 963497882, 963497883]; // fieldtype: uint32_t  isarray: True 
      test_esc_info.counter = 18483; // fieldtype: uint16_t  isarray: False 
      test_esc_info.failure_flags = [18587, 18588, 18589, 18590]; // fieldtype: uint16_t  isarray: True 
      test_esc_info.temperature = [19003, 19004, 19005, 19006]; // fieldtype: int16_t  isarray: True 
      test_esc_info.index = 3; // fieldtype: uint8_t  isarray: False 
      test_esc_info.count = 70; // fieldtype: uint8_t  isarray: False 
      test_esc_info.connection_type = 137; // fieldtype: uint8_t  isarray: False 
      test_esc_info.info = 204; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //esc_info
 var t = new Buffer.from(test_esc_info.pack(mav));
   return [test_esc_info,t]; // return an array of unpacked and packed options
};
exports.test_esc_info = test_esc_info; // expose in module

let test_esc_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:esc_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:esc_status          \r'); }
   var test_esc_status = new mavlink20.messages.esc_status(); 
      test_esc_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_esc_status.rpm = [963497880, 963497881, 963497882, 963497883]; // fieldtype: int32_t  isarray: True 
      test_esc_status.voltage = [185.0, 186.0, 187.0, 188.0]; // fieldtype: float  isarray: True 
      test_esc_status.current = [297.0, 298.0, 299.0, 300.0]; // fieldtype: float  isarray: True 
      test_esc_status.index = 173; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //esc_status
 var t = new Buffer.from(test_esc_status.pack(mav));
   return [test_esc_status,t]; // return an array of unpacked and packed options
};
exports.test_esc_status = test_esc_status; // expose in module

let test_wifi_config_ap = function () {
   if ( verbose == 2 ) console.log('test creating and packing:wifi_config_ap'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:wifi_config_ap          \r'); }
   var test_wifi_config_ap = new mavlink20.messages.wifi_config_ap(); 
      test_wifi_config_ap.ssid = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDE"; // fieldtype: char  isarray: False 
      test_wifi_config_ap.password = "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ"; // fieldtype: char  isarray: False 
      test_wifi_config_ap.mode = (new Int8Array([37]))[0]; // fieldtype: int8_t  isarray: False 
      test_wifi_config_ap.response = (new Int8Array([104]))[0]; // fieldtype: int8_t  isarray: False 
 //var t = new Buffer.from([])
; //wifi_config_ap
 var t = new Buffer.from(test_wifi_config_ap.pack(mav));
   return [test_wifi_config_ap,t]; // return an array of unpacked and packed options
};
exports.test_wifi_config_ap = test_wifi_config_ap; // expose in module

let test_ais_vessel = function () {
   if ( verbose == 2 ) console.log('test creating and packing:ais_vessel'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:ais_vessel          \r'); }
   var test_ais_vessel = new mavlink20.messages.ais_vessel(); 
      test_ais_vessel.MMSI = 963497464; // fieldtype: uint32_t  isarray: False 
      test_ais_vessel.lat = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_ais_vessel.lon = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_ais_vessel.COG = 17859; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.heading = 17963; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.velocity = 18067; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.dimension_bow = 18171; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.dimension_stern = 18275; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.tslc = 18379; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.flags = 18483; // fieldtype: uint16_t  isarray: False 
      test_ais_vessel.turn_rate = (new Int8Array([211]))[0]; // fieldtype: int8_t  isarray: False 
      test_ais_vessel.navigational_status = 22; // fieldtype: uint8_t  isarray: False 
      test_ais_vessel.type = 89; // fieldtype: uint8_t  isarray: False 
      test_ais_vessel.dimension_port = 156; // fieldtype: uint8_t  isarray: False 
      test_ais_vessel.dimension_starboard = 223; // fieldtype: uint8_t  isarray: False 
      test_ais_vessel.callsign = "FGHIJK"; // fieldtype: char  isarray: False 
      test_ais_vessel.name = "MNOPQRSTUVWXYZABCDE"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //ais_vessel
 var t = new Buffer.from(test_ais_vessel.pack(mav));
   return [test_ais_vessel,t]; // return an array of unpacked and packed options
};
exports.test_ais_vessel = test_ais_vessel; // expose in module

let test_uavcan_node_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:uavcan_node_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:uavcan_node_status          \r'); }
   var test_uavcan_node_status = new mavlink20.messages.uavcan_node_status(); 
      test_uavcan_node_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_uavcan_node_status.uptime_sec = 963497880; // fieldtype: uint32_t  isarray: False 
      test_uavcan_node_status.vendor_specific_status_code = 17859; // fieldtype: uint16_t  isarray: False 
      test_uavcan_node_status.health = 175; // fieldtype: uint8_t  isarray: False 
      test_uavcan_node_status.mode = 242; // fieldtype: uint8_t  isarray: False 
      test_uavcan_node_status.sub_mode = 53; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //uavcan_node_status
 var t = new Buffer.from(test_uavcan_node_status.pack(mav));
   return [test_uavcan_node_status,t]; // return an array of unpacked and packed options
};
exports.test_uavcan_node_status = test_uavcan_node_status; // expose in module

let test_uavcan_node_info = function () {
   if ( verbose == 2 ) console.log('test creating and packing:uavcan_node_info'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:uavcan_node_info          \r'); }
   var test_uavcan_node_info = new mavlink20.messages.uavcan_node_info(); 
      test_uavcan_node_info.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_uavcan_node_info.uptime_sec = 963497880; // fieldtype: uint32_t  isarray: False 
      test_uavcan_node_info.sw_vcs_commit = 963498088; // fieldtype: uint32_t  isarray: False 
      test_uavcan_node_info.name = "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ"; // fieldtype: char  isarray: False 
      test_uavcan_node_info.hw_version_major = 37; // fieldtype: uint8_t  isarray: False 
      test_uavcan_node_info.hw_version_minor = 104; // fieldtype: uint8_t  isarray: False 
      test_uavcan_node_info.hw_unique_id = new Buffer.from([171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_uavcan_node_info.sw_version_major = 219; // fieldtype: uint8_t  isarray: False 
      test_uavcan_node_info.sw_version_minor = 30; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //uavcan_node_info
 var t = new Buffer.from(test_uavcan_node_info.pack(mav));
   return [test_uavcan_node_info,t]; // return an array of unpacked and packed options
};
exports.test_uavcan_node_info = test_uavcan_node_info; // expose in module

let test_param_ext_request_read = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_ext_request_read'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_ext_request_read          \r'); }
   var test_param_ext_request_read = new mavlink20.messages.param_ext_request_read(); 
      test_param_ext_request_read.param_index = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_param_ext_request_read.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_param_ext_request_read.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_param_ext_request_read.param_id = "EFGHIJKLMNOPQRS"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //param_ext_request_read
 var t = new Buffer.from(test_param_ext_request_read.pack(mav));
   return [test_param_ext_request_read,t]; // return an array of unpacked and packed options
};
exports.test_param_ext_request_read = test_param_ext_request_read; // expose in module

let test_param_ext_request_list = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_ext_request_list'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_ext_request_list          \r'); }
   var test_param_ext_request_list = new mavlink20.messages.param_ext_request_list(); 
      test_param_ext_request_list.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_param_ext_request_list.target_component = 72; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_ext_request_list
 var t = new Buffer.from(test_param_ext_request_list.pack(mav));
   return [test_param_ext_request_list,t]; // return an array of unpacked and packed options
};
exports.test_param_ext_request_list = test_param_ext_request_list; // expose in module

let test_param_ext_value = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_ext_value'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_ext_value          \r'); }
   var test_param_ext_value = new mavlink20.messages.param_ext_value(); 
      test_param_ext_value.param_count = 17235; // fieldtype: uint16_t  isarray: False 
      test_param_ext_value.param_index = 17339; // fieldtype: uint16_t  isarray: False 
      test_param_ext_value.param_id = "EFGHIJKLMNOPQRS"; // fieldtype: char  isarray: False 
      test_param_ext_value.param_value = "UVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQ"; // fieldtype: char  isarray: False 
      test_param_ext_value.param_type = 193; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_ext_value
 var t = new Buffer.from(test_param_ext_value.pack(mav));
   return [test_param_ext_value,t]; // return an array of unpacked and packed options
};
exports.test_param_ext_value = test_param_ext_value; // expose in module

let test_param_ext_set = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_ext_set'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_ext_set          \r'); }
   var test_param_ext_set = new mavlink20.messages.param_ext_set(); 
      test_param_ext_set.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_param_ext_set.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_param_ext_set.param_id = "CDEFGHIJKLMNOPQ"; // fieldtype: char  isarray: False 
      test_param_ext_set.param_value = "STUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO"; // fieldtype: char  isarray: False 
      test_param_ext_set.param_type = 59; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_ext_set
 var t = new Buffer.from(test_param_ext_set.pack(mav));
   return [test_param_ext_set,t]; // return an array of unpacked and packed options
};
exports.test_param_ext_set = test_param_ext_set; // expose in module

let test_param_ext_ack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:param_ext_ack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:param_ext_ack          \r'); }
   var test_param_ext_ack = new mavlink20.messages.param_ext_ack(); 
      test_param_ext_ack.param_id = "ABCDEFGHIJKLMNO"; // fieldtype: char  isarray: False 
      test_param_ext_ack.param_value = "QRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLM"; // fieldtype: char  isarray: False 
      test_param_ext_ack.param_type = 181; // fieldtype: uint8_t  isarray: False 
      test_param_ext_ack.param_result = 248; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //param_ext_ack
 var t = new Buffer.from(test_param_ext_ack.pack(mav));
   return [test_param_ext_ack,t]; // return an array of unpacked and packed options
};
exports.test_param_ext_ack = test_param_ext_ack; // expose in module

let test_obstacle_distance = function () {
   if ( verbose == 2 ) console.log('test creating and packing:obstacle_distance'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:obstacle_distance          \r'); }
   var test_obstacle_distance = new mavlink20.messages.obstacle_distance(); 
      test_obstacle_distance.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_obstacle_distance.distances = [17651, 17652, 17653, 17654, 17655, 17656, 17657, 17658, 17659, 17660, 17661, 17662, 17663, 17664, 17665, 17666, 17667, 17668, 17669, 17670, 17671, 17672, 17673, 17674, 17675, 17676, 17677, 17678, 17679, 17680, 17681, 17682, 17683, 17684, 17685, 17686, 17687, 17688, 17689, 17690, 17691, 17692, 17693, 17694, 17695, 17696, 17697, 17698, 17699, 17700, 17701, 17702, 17703, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17715, 17716, 17717, 17718, 17719, 17720, 17721, 17722]; // fieldtype: uint16_t  isarray: True 
      test_obstacle_distance.min_distance = 25139; // fieldtype: uint16_t  isarray: False 
      test_obstacle_distance.max_distance = 25243; // fieldtype: uint16_t  isarray: False 
      test_obstacle_distance.sensor_type = 217; // fieldtype: uint8_t  isarray: False 
      test_obstacle_distance.increment = 28; // fieldtype: uint8_t  isarray: False 
      test_obstacle_distance.increment_f = 1123.0; // fieldtype: float  isarray: False 
      test_obstacle_distance.angle_offset = 1151.0; // fieldtype: float  isarray: False 
      test_obstacle_distance.frame = 119; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //obstacle_distance
 var t = new Buffer.from(test_obstacle_distance.pack(mav));
   return [test_obstacle_distance,t]; // return an array of unpacked and packed options
};
exports.test_obstacle_distance = test_obstacle_distance; // expose in module

let test_odometry = function () {
   if ( verbose == 2 ) console.log('test creating and packing:odometry'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:odometry          \r'); }
   var test_odometry = new mavlink20.messages.odometry(); 
      test_odometry.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_odometry.x = 73.0; // fieldtype: float  isarray: False 
      test_odometry.y = 101.0; // fieldtype: float  isarray: False 
      test_odometry.z = 129.0; // fieldtype: float  isarray: False 
      test_odometry.q = [157.0, 158.0, 159.0, 160.0]; // fieldtype: float  isarray: True 
      test_odometry.vx = 269.0; // fieldtype: float  isarray: False 
      test_odometry.vy = 297.0; // fieldtype: float  isarray: False 
      test_odometry.vz = 325.0; // fieldtype: float  isarray: False 
      test_odometry.rollspeed = 353.0; // fieldtype: float  isarray: False 
      test_odometry.pitchspeed = 381.0; // fieldtype: float  isarray: False 
      test_odometry.yawspeed = 409.0; // fieldtype: float  isarray: False 
      test_odometry.pose_covariance = [437.0, 438.0, 439.0, 440.0, 441.0, 442.0, 443.0, 444.0, 445.0, 446.0, 447.0, 448.0, 449.0, 450.0, 451.0, 452.0, 453.0, 454.0, 455.0, 456.0, 457.0]; // fieldtype: float  isarray: True 
      test_odometry.velocity_covariance = [1025.0, 1026.0, 1027.0, 1028.0, 1029.0, 1030.0, 1031.0, 1032.0, 1033.0, 1034.0, 1035.0, 1036.0, 1037.0, 1038.0, 1039.0, 1040.0, 1041.0, 1042.0, 1043.0, 1044.0, 1045.0]; // fieldtype: float  isarray: True 
      test_odometry.frame_id = 177; // fieldtype: uint8_t  isarray: False 
      test_odometry.child_frame_id = 244; // fieldtype: uint8_t  isarray: False 
      test_odometry.reset_counter = 55; // fieldtype: uint8_t  isarray: False 
      test_odometry.estimator_type = 122; // fieldtype: uint8_t  isarray: False 
      test_odometry.quality = (new Int8Array([189]))[0]; // fieldtype: int8_t  isarray: False 
 //var t = new Buffer.from([])
; //odometry
 var t = new Buffer.from(test_odometry.pack(mav));
   return [test_odometry,t]; // return an array of unpacked and packed options
};
exports.test_odometry = test_odometry; // expose in module

let test_trajectory_representation_waypoints = function () {
   if ( verbose == 2 ) console.log('test creating and packing:trajectory_representation_waypoints'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:trajectory_representation_waypoints          \r'); }
   var test_trajectory_representation_waypoints = new mavlink20.messages.trajectory_representation_waypoints(); 
      test_trajectory_representation_waypoints.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_trajectory_representation_waypoints.pos_x = [73.0, 74.0, 75.0, 76.0, 77.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.pos_y = [213.0, 214.0, 215.0, 216.0, 217.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.pos_z = [353.0, 354.0, 355.0, 356.0, 357.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.vel_x = [493.0, 494.0, 495.0, 496.0, 497.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.vel_y = [633.0, 634.0, 635.0, 636.0, 637.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.vel_z = [773.0, 774.0, 775.0, 776.0, 777.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.acc_x = [913.0, 914.0, 915.0, 916.0, 917.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.acc_y = [1053.0, 1054.0, 1055.0, 1056.0, 1057.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.acc_z = [1193.0, 1194.0, 1195.0, 1196.0, 1197.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.pos_yaw = [1333.0, 1334.0, 1335.0, 1336.0, 1337.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.vel_yaw = [1473.0, 1474.0, 1475.0, 1476.0, 1477.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_waypoints.command = [29091, 29092, 29093, 29094, 29095]; // fieldtype: uint16_t  isarray: True 
      test_trajectory_representation_waypoints.valid_points = 79; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //trajectory_representation_waypoints
 var t = new Buffer.from(test_trajectory_representation_waypoints.pack(mav));
   return [test_trajectory_representation_waypoints,t]; // return an array of unpacked and packed options
};
exports.test_trajectory_representation_waypoints = test_trajectory_representation_waypoints; // expose in module

let test_trajectory_representation_bezier = function () {
   if ( verbose == 2 ) console.log('test creating and packing:trajectory_representation_bezier'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:trajectory_representation_bezier          \r'); }
   var test_trajectory_representation_bezier = new mavlink20.messages.trajectory_representation_bezier(); 
      test_trajectory_representation_bezier.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_trajectory_representation_bezier.pos_x = [73.0, 74.0, 75.0, 76.0, 77.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_bezier.pos_y = [213.0, 214.0, 215.0, 216.0, 217.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_bezier.pos_z = [353.0, 354.0, 355.0, 356.0, 357.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_bezier.delta = [493.0, 494.0, 495.0, 496.0, 497.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_bezier.pos_yaw = [633.0, 634.0, 635.0, 636.0, 637.0]; // fieldtype: float  isarray: True 
      test_trajectory_representation_bezier.valid_points = 73; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //trajectory_representation_bezier
 var t = new Buffer.from(test_trajectory_representation_bezier.pack(mav));
   return [test_trajectory_representation_bezier,t]; // return an array of unpacked and packed options
};
exports.test_trajectory_representation_bezier = test_trajectory_representation_bezier; // expose in module

let test_cellular_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:cellular_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:cellular_status          \r'); }
   var test_cellular_status = new mavlink20.messages.cellular_status(); 
      test_cellular_status.mcc = 17235; // fieldtype: uint16_t  isarray: False 
      test_cellular_status.mnc = 17339; // fieldtype: uint16_t  isarray: False 
      test_cellular_status.lac = 17443; // fieldtype: uint16_t  isarray: False 
      test_cellular_status.status = 151; // fieldtype: uint8_t  isarray: False 
      test_cellular_status.failure_reason = 218; // fieldtype: uint8_t  isarray: False 
      test_cellular_status.type = 29; // fieldtype: uint8_t  isarray: False 
      test_cellular_status.quality = 96; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //cellular_status
 var t = new Buffer.from(test_cellular_status.pack(mav));
   return [test_cellular_status,t]; // return an array of unpacked and packed options
};
exports.test_cellular_status = test_cellular_status; // expose in module

let test_isbd_link_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:isbd_link_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:isbd_link_status          \r'); }
   var test_isbd_link_status = new mavlink20.messages.isbd_link_status(); 
      test_isbd_link_status.timestamp = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_isbd_link_status.last_heartbeat = wrap_long(Long.fromString("93372036854776311", true)); // fieldtype: uint64_t  isarray: False 
      test_isbd_link_status.failed_sessions = 18067; // fieldtype: uint16_t  isarray: False 
      test_isbd_link_status.successful_sessions = 18171; // fieldtype: uint16_t  isarray: False 
      test_isbd_link_status.signal_quality = 65; // fieldtype: uint8_t  isarray: False 
      test_isbd_link_status.ring_pending = 132; // fieldtype: uint8_t  isarray: False 
      test_isbd_link_status.tx_session_pending = 199; // fieldtype: uint8_t  isarray: False 
      test_isbd_link_status.rx_session_pending = 10; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //isbd_link_status
 var t = new Buffer.from(test_isbd_link_status.pack(mav));
   return [test_isbd_link_status,t]; // return an array of unpacked and packed options
};
exports.test_isbd_link_status = test_isbd_link_status; // expose in module

let test_cellular_config = function () {
   if ( verbose == 2 ) console.log('test creating and packing:cellular_config'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:cellular_config          \r'); }
   var test_cellular_config = new mavlink20.messages.cellular_config(); 
      test_cellular_config.enable_lte = 5; // fieldtype: uint8_t  isarray: False 
      test_cellular_config.enable_pin = 72; // fieldtype: uint8_t  isarray: False 
      test_cellular_config.pin = "CDEFGHIJKLMNOPQ"; // fieldtype: char  isarray: False 
      test_cellular_config.new_pin = "STUVWXYZABCDEFG"; // fieldtype: char  isarray: False 
      test_cellular_config.apn = "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLM"; // fieldtype: char  isarray: False 
      test_cellular_config.puk = "OPQRSTUVWXYZABC"; // fieldtype: char  isarray: False 
      test_cellular_config.roaming = 123; // fieldtype: uint8_t  isarray: False 
      test_cellular_config.response = 190; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //cellular_config
 var t = new Buffer.from(test_cellular_config.pack(mav));
   return [test_cellular_config,t]; // return an array of unpacked and packed options
};
exports.test_cellular_config = test_cellular_config; // expose in module

let test_raw_rpm = function () {
   if ( verbose == 2 ) console.log('test creating and packing:raw_rpm'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:raw_rpm          \r'); }
   var test_raw_rpm = new mavlink20.messages.raw_rpm(); 
      test_raw_rpm.frequency = 17.0; // fieldtype: float  isarray: False 
      test_raw_rpm.index = 17; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //raw_rpm
 var t = new Buffer.from(test_raw_rpm.pack(mav));
   return [test_raw_rpm,t]; // return an array of unpacked and packed options
};
exports.test_raw_rpm = test_raw_rpm; // expose in module

let test_utm_global_position = function () {
   if ( verbose == 2 ) console.log('test creating and packing:utm_global_position'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:utm_global_position          \r'); }
   var test_utm_global_position = new mavlink20.messages.utm_global_position(); 
      test_utm_global_position.time = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_utm_global_position.lat = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.lon = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.alt = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.relative_alt = (new Int32Array([963498504]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.next_lat = (new Int32Array([963498712]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.next_lon = (new Int32Array([963498920]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.next_alt = (new Int32Array([963499128]))[0]; // fieldtype: int32_t  isarray: False 
      test_utm_global_position.vx = (new Int16Array([19107]))[0]; // fieldtype: int16_t  isarray: False 
      test_utm_global_position.vy = (new Int16Array([19211]))[0]; // fieldtype: int16_t  isarray: False 
      test_utm_global_position.vz = (new Int16Array([19315]))[0]; // fieldtype: int16_t  isarray: False 
      test_utm_global_position.h_acc = 19419; // fieldtype: uint16_t  isarray: False 
      test_utm_global_position.v_acc = 19523; // fieldtype: uint16_t  isarray: False 
      test_utm_global_position.vel_acc = 19627; // fieldtype: uint16_t  isarray: False 
      test_utm_global_position.update_rate = 19731; // fieldtype: uint16_t  isarray: False 
      test_utm_global_position.uas_id = new Buffer.from([27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_utm_global_position.flight_state = 209; // fieldtype: uint8_t  isarray: False 
      test_utm_global_position.flags = 20; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //utm_global_position
 var t = new Buffer.from(test_utm_global_position.pack(mav));
   return [test_utm_global_position,t]; // return an array of unpacked and packed options
};
exports.test_utm_global_position = test_utm_global_position; // expose in module

let test_debug_float_array = function () {
   if ( verbose == 2 ) console.log('test creating and packing:debug_float_array'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:debug_float_array          \r'); }
   var test_debug_float_array = new mavlink20.messages.debug_float_array(); 
      test_debug_float_array.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_debug_float_array.array_id = 17651; // fieldtype: uint16_t  isarray: False 
      test_debug_float_array.name = "KLMNOPQRS"; // fieldtype: char  isarray: False 
      test_debug_float_array.data = [157.0, 158.0, 159.0, 160.0, 161.0, 162.0, 163.0, 164.0, 165.0, 166.0, 167.0, 168.0, 169.0, 170.0, 171.0, 172.0, 173.0, 174.0, 175.0, 176.0, 177.0, 178.0, 179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0, 195.0, 196.0, 197.0, 198.0, 199.0, 200.0, 201.0, 202.0, 203.0, 204.0, 205.0, 206.0, 207.0, 208.0, 209.0, 210.0, 211.0, 212.0, 213.0, 214.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //debug_float_array
 var t = new Buffer.from(test_debug_float_array.pack(mav));
   return [test_debug_float_array,t]; // return an array of unpacked and packed options
};
exports.test_debug_float_array = test_debug_float_array; // expose in module

let test_orbit_execution_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:orbit_execution_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:orbit_execution_status          \r'); }
   var test_orbit_execution_status = new mavlink20.messages.orbit_execution_status(); 
      test_orbit_execution_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_orbit_execution_status.radius = 73.0; // fieldtype: float  isarray: False 
      test_orbit_execution_status.x = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_orbit_execution_status.y = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
      test_orbit_execution_status.z = 157.0; // fieldtype: float  isarray: False 
      test_orbit_execution_status.frame = 77; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //orbit_execution_status
 var t = new Buffer.from(test_orbit_execution_status.pack(mav));
   return [test_orbit_execution_status,t]; // return an array of unpacked and packed options
};
exports.test_orbit_execution_status = test_orbit_execution_status; // expose in module

let test_smart_battery_info = function () {
   if ( verbose == 2 ) console.log('test creating and packing:smart_battery_info'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:smart_battery_info          \r'); }
   var test_smart_battery_info = new mavlink20.messages.smart_battery_info(); 
      test_smart_battery_info.capacity_full_specification = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_smart_battery_info.capacity_full = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_smart_battery_info.cycle_count = 17651; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.weight = 17755; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.discharge_minimum_voltage = 17859; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.charging_minimum_voltage = 17963; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.resting_minimum_voltage = 18067; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.id = 187; // fieldtype: uint8_t  isarray: False 
      test_smart_battery_info.battery_function = 254; // fieldtype: uint8_t  isarray: False 
      test_smart_battery_info.type = 65; // fieldtype: uint8_t  isarray: False 
      test_smart_battery_info.serial_number = "VWXYZABCDEFGHIJ"; // fieldtype: char  isarray: False 
      test_smart_battery_info.device_name = "LMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH"; // fieldtype: char  isarray: False 
      test_smart_battery_info.charging_maximum_voltage = 21759; // fieldtype: uint16_t  isarray: False 
      test_smart_battery_info.cells_in_series = 80; // fieldtype: uint8_t  isarray: False 
      test_smart_battery_info.discharge_maximum_current = 963502144; // fieldtype: uint32_t  isarray: False 
      test_smart_battery_info.discharge_maximum_burst_current = 963502352; // fieldtype: uint32_t  isarray: False 
      test_smart_battery_info.manufacture_date = "UVWXYZABCD"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //smart_battery_info
 var t = new Buffer.from(test_smart_battery_info.pack(mav));
   return [test_smart_battery_info,t]; // return an array of unpacked and packed options
};
exports.test_smart_battery_info = test_smart_battery_info; // expose in module

let test_generator_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:generator_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:generator_status          \r'); }
   var test_generator_status = new mavlink20.messages.generator_status(); 
      test_generator_status.status = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_generator_status.battery_current = 73.0; // fieldtype: float  isarray: False 
      test_generator_status.load_current = 101.0; // fieldtype: float  isarray: False 
      test_generator_status.power_generated = 129.0; // fieldtype: float  isarray: False 
      test_generator_status.bus_voltage = 157.0; // fieldtype: float  isarray: False 
      test_generator_status.bat_current_setpoint = 185.0; // fieldtype: float  isarray: False 
      test_generator_status.runtime = 963498920; // fieldtype: uint32_t  isarray: False 
      test_generator_status.time_until_maintenance = (new Int32Array([963499128]))[0]; // fieldtype: int32_t  isarray: False 
      test_generator_status.generator_speed = 19107; // fieldtype: uint16_t  isarray: False 
      test_generator_status.rectifier_temperature = (new Int16Array([19211]))[0]; // fieldtype: int16_t  isarray: False 
      test_generator_status.generator_temperature = (new Int16Array([19315]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //generator_status
 var t = new Buffer.from(test_generator_status.pack(mav));
   return [test_generator_status,t]; // return an array of unpacked and packed options
};
exports.test_generator_status = test_generator_status; // expose in module

let test_actuator_output_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:actuator_output_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:actuator_output_status          \r'); }
   var test_actuator_output_status = new mavlink20.messages.actuator_output_status(); 
      test_actuator_output_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_actuator_output_status.active = 963497880; // fieldtype: uint32_t  isarray: False 
      test_actuator_output_status.actuator = [101.0, 102.0, 103.0, 104.0, 105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0, 129.0, 130.0, 131.0, 132.0]; // fieldtype: float  isarray: True 
 //var t = new Buffer.from([])
; //actuator_output_status
 var t = new Buffer.from(test_actuator_output_status.pack(mav));
   return [test_actuator_output_status,t]; // return an array of unpacked and packed options
};
exports.test_actuator_output_status = test_actuator_output_status; // expose in module

let test_time_estimate_to_target = function () {
   if ( verbose == 2 ) console.log('test creating and packing:time_estimate_to_target'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:time_estimate_to_target          \r'); }
   var test_time_estimate_to_target = new mavlink20.messages.time_estimate_to_target(); 
      test_time_estimate_to_target.safe_return = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_time_estimate_to_target.land = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_time_estimate_to_target.mission_next_item = (new Int32Array([963497880]))[0]; // fieldtype: int32_t  isarray: False 
      test_time_estimate_to_target.mission_end = (new Int32Array([963498088]))[0]; // fieldtype: int32_t  isarray: False 
      test_time_estimate_to_target.commanded_action = (new Int32Array([963498296]))[0]; // fieldtype: int32_t  isarray: False 
 //var t = new Buffer.from([])
; //time_estimate_to_target
 var t = new Buffer.from(test_time_estimate_to_target.pack(mav));
   return [test_time_estimate_to_target,t]; // return an array of unpacked and packed options
};
exports.test_time_estimate_to_target = test_time_estimate_to_target; // expose in module

let test_tunnel = function () {
   if ( verbose == 2 ) console.log('test creating and packing:tunnel'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:tunnel          \r'); }
   var test_tunnel = new mavlink20.messages.tunnel(); 
      test_tunnel.payload_type = 17235; // fieldtype: uint16_t  isarray: False 
      test_tunnel.target_system = 139; // fieldtype: uint8_t  isarray: False 
      test_tunnel.target_component = 206; // fieldtype: uint8_t  isarray: False 
      test_tunnel.payload_length = 17; // fieldtype: uint8_t  isarray: False 
      test_tunnel.payload = new Buffer.from([84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //tunnel
 var t = new Buffer.from(test_tunnel.pack(mav));
   return [test_tunnel,t]; // return an array of unpacked and packed options
};
exports.test_tunnel = test_tunnel; // expose in module

let test_can_frame = function () {
   if ( verbose == 2 ) console.log('test creating and packing:can_frame'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:can_frame          \r'); }
   var test_can_frame = new mavlink20.messages.can_frame(); 
      test_can_frame.id = 963497464; // fieldtype: uint32_t  isarray: False 
      test_can_frame.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_can_frame.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_can_frame.bus = 151; // fieldtype: uint8_t  isarray: False 
      test_can_frame.len = 218; // fieldtype: uint8_t  isarray: False 
      test_can_frame.data = new Buffer.from([29, 30, 31, 32, 33, 34, 35, 36]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //can_frame
 var t = new Buffer.from(test_can_frame.pack(mav));
   return [test_can_frame,t]; // return an array of unpacked and packed options
};
exports.test_can_frame = test_can_frame; // expose in module

let test_onboard_computer_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:onboard_computer_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:onboard_computer_status          \r'); }
   var test_onboard_computer_status = new mavlink20.messages.onboard_computer_status(); 
      test_onboard_computer_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_onboard_computer_status.uptime = 963497880; // fieldtype: uint32_t  isarray: False 
      test_onboard_computer_status.ram_usage = 963498088; // fieldtype: uint32_t  isarray: False 
      test_onboard_computer_status.ram_total = 963498296; // fieldtype: uint32_t  isarray: False 
      test_onboard_computer_status.storage_type = [963498504, 963498505, 963498506, 963498507]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.storage_usage = [963499336, 963499337, 963499338, 963499339]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.storage_total = [963500168, 963500169, 963500170, 963500171]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.link_type = [963501000, 963501001, 963501002, 963501003, 963501004, 963501005]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.link_tx_rate = [963502248, 963502249, 963502250, 963502251, 963502252, 963502253]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.link_rx_rate = [963503496, 963503497, 963503498, 963503499, 963503500, 963503501]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.link_tx_max = [963504744, 963504745, 963504746, 963504747, 963504748, 963504749]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.link_rx_max = [963505992, 963505993, 963505994, 963505995, 963505996, 963505997]; // fieldtype: uint32_t  isarray: True 
      test_onboard_computer_status.fan_speed = [27011, 27012, 27013, 27014]; // fieldtype: int16_t  isarray: True 
      test_onboard_computer_status.type = 81; // fieldtype: uint8_t  isarray: False 
      test_onboard_computer_status.cpu_cores = new Buffer.from([148, 149, 150, 151, 152, 153, 154, 155]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_onboard_computer_status.cpu_combined = new Buffer.from([172, 173, 174, 175, 176, 177, 178, 179, 180, 181]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_onboard_computer_status.gpu_cores = new Buffer.from([74, 75, 76, 77]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_onboard_computer_status.gpu_combined = new Buffer.from([86, 87, 88, 89, 90, 91, 92, 93, 94, 95]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_onboard_computer_status.temperature_board = (new Int8Array([244]))[0]; // fieldtype: int8_t  isarray: False 
      test_onboard_computer_status.temperature_core = new Buffer.from([55, 56, 57, 58, 59, 60, 61, 62]).toString("binary"); // fieldtype: int8_t  isarray: True 
 //var t = new Buffer.from([])
; //onboard_computer_status
 var t = new Buffer.from(test_onboard_computer_status.pack(mav));
   return [test_onboard_computer_status,t]; // return an array of unpacked and packed options
};
exports.test_onboard_computer_status = test_onboard_computer_status; // expose in module

let test_component_information = function () {
   if ( verbose == 2 ) console.log('test creating and packing:component_information'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:component_information          \r'); }
   var test_component_information = new mavlink20.messages.component_information(); 
      test_component_information.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_component_information.general_metadata_file_crc = 963497672; // fieldtype: uint32_t  isarray: False 
      test_component_information.peripherals_metadata_file_crc = 963497880; // fieldtype: uint32_t  isarray: False 
      test_component_information.general_metadata_uri = "MNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFG"; // fieldtype: char  isarray: False 
      test_component_information.peripherals_metadata_uri = "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //component_information
 var t = new Buffer.from(test_component_information.pack(mav));
   return [test_component_information,t]; // return an array of unpacked and packed options
};
exports.test_component_information = test_component_information; // expose in module

let test_component_metadata = function () {
   if ( verbose == 2 ) console.log('test creating and packing:component_metadata'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:component_metadata          \r'); }
   var test_component_metadata = new mavlink20.messages.component_metadata(); 
      test_component_metadata.time_boot_ms = 963497464; // fieldtype: uint32_t  isarray: False 
      test_component_metadata.file_crc = 963497672; // fieldtype: uint32_t  isarray: False 
      test_component_metadata.uri = "IJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //component_metadata
 var t = new Buffer.from(test_component_metadata.pack(mav));
   return [test_component_metadata,t]; // return an array of unpacked and packed options
};
exports.test_component_metadata = test_component_metadata; // expose in module

let test_play_tune_v2 = function () {
   if ( verbose == 2 ) console.log('test creating and packing:play_tune_v2'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:play_tune_v2          \r'); }
   var test_play_tune_v2 = new mavlink20.messages.play_tune_v2(); 
      test_play_tune_v2.format = 963497464; // fieldtype: uint32_t  isarray: False 
      test_play_tune_v2.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_play_tune_v2.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_play_tune_v2.tune = "GHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRS"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //play_tune_v2
 var t = new Buffer.from(test_play_tune_v2.pack(mav));
   return [test_play_tune_v2,t]; // return an array of unpacked and packed options
};
exports.test_play_tune_v2 = test_play_tune_v2; // expose in module

let test_supported_tunes = function () {
   if ( verbose == 2 ) console.log('test creating and packing:supported_tunes'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:supported_tunes          \r'); }
   var test_supported_tunes = new mavlink20.messages.supported_tunes(); 
      test_supported_tunes.format = 963497464; // fieldtype: uint32_t  isarray: False 
      test_supported_tunes.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_supported_tunes.target_component = 84; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //supported_tunes
 var t = new Buffer.from(test_supported_tunes.pack(mav));
   return [test_supported_tunes,t]; // return an array of unpacked and packed options
};
exports.test_supported_tunes = test_supported_tunes; // expose in module

let test_event = function () {
   if ( verbose == 2 ) console.log('test creating and packing:event'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:event          \r'); }
   var test_event = new mavlink20.messages.event(); 
      test_event.id = 963497464; // fieldtype: uint32_t  isarray: False 
      test_event.event_time_boot_ms = 963497672; // fieldtype: uint32_t  isarray: False 
      test_event.sequence = 17651; // fieldtype: uint16_t  isarray: False 
      test_event.destination_component = 163; // fieldtype: uint8_t  isarray: False 
      test_event.destination_system = 230; // fieldtype: uint8_t  isarray: False 
      test_event.log_levels = 41; // fieldtype: uint8_t  isarray: False 
      test_event.arguments = new Buffer.from([108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //event
 var t = new Buffer.from(test_event.pack(mav));
   return [test_event,t]; // return an array of unpacked and packed options
};
exports.test_event = test_event; // expose in module

let test_current_event_sequence = function () {
   if ( verbose == 2 ) console.log('test creating and packing:current_event_sequence'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:current_event_sequence          \r'); }
   var test_current_event_sequence = new mavlink20.messages.current_event_sequence(); 
      test_current_event_sequence.sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_current_event_sequence.flags = 139; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //current_event_sequence
 var t = new Buffer.from(test_current_event_sequence.pack(mav));
   return [test_current_event_sequence,t]; // return an array of unpacked and packed options
};
exports.test_current_event_sequence = test_current_event_sequence; // expose in module

let test_request_event = function () {
   if ( verbose == 2 ) console.log('test creating and packing:request_event'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:request_event          \r'); }
   var test_request_event = new mavlink20.messages.request_event(); 
      test_request_event.first_sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_request_event.last_sequence = 17339; // fieldtype: uint16_t  isarray: False 
      test_request_event.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_request_event.target_component = 84; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //request_event
 var t = new Buffer.from(test_request_event.pack(mav));
   return [test_request_event,t]; // return an array of unpacked and packed options
};
exports.test_request_event = test_request_event; // expose in module

let test_response_event_error = function () {
   if ( verbose == 2 ) console.log('test creating and packing:response_event_error'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:response_event_error          \r'); }
   var test_response_event_error = new mavlink20.messages.response_event_error(); 
      test_response_event_error.sequence = 17235; // fieldtype: uint16_t  isarray: False 
      test_response_event_error.sequence_oldest_available = 17339; // fieldtype: uint16_t  isarray: False 
      test_response_event_error.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_response_event_error.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_response_event_error.reason = 151; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //response_event_error
 var t = new Buffer.from(test_response_event_error.pack(mav));
   return [test_response_event_error,t]; // return an array of unpacked and packed options
};
exports.test_response_event_error = test_response_event_error; // expose in module

let test_canfd_frame = function () {
   if ( verbose == 2 ) console.log('test creating and packing:canfd_frame'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:canfd_frame          \r'); }
   var test_canfd_frame = new mavlink20.messages.canfd_frame(); 
      test_canfd_frame.id = 963497464; // fieldtype: uint32_t  isarray: False 
      test_canfd_frame.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_canfd_frame.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_canfd_frame.bus = 151; // fieldtype: uint8_t  isarray: False 
      test_canfd_frame.len = 218; // fieldtype: uint8_t  isarray: False 
      test_canfd_frame.data = new Buffer.from([29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //canfd_frame
 var t = new Buffer.from(test_canfd_frame.pack(mav));
   return [test_canfd_frame,t]; // return an array of unpacked and packed options
};
exports.test_canfd_frame = test_canfd_frame; // expose in module

let test_can_filter_modify = function () {
   if ( verbose == 2 ) console.log('test creating and packing:can_filter_modify'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:can_filter_modify          \r'); }
   var test_can_filter_modify = new mavlink20.messages.can_filter_modify(); 
      test_can_filter_modify.ids = [17235, 17236, 17237, 17238, 17239, 17240, 17241, 17242, 17243, 17244, 17245, 17246, 17247, 17248, 17249, 17250]; // fieldtype: uint16_t  isarray: True 
      test_can_filter_modify.target_system = 101; // fieldtype: uint8_t  isarray: False 
      test_can_filter_modify.target_component = 168; // fieldtype: uint8_t  isarray: False 
      test_can_filter_modify.bus = 235; // fieldtype: uint8_t  isarray: False 
      test_can_filter_modify.operation = 46; // fieldtype: uint8_t  isarray: False 
      test_can_filter_modify.num_ids = 113; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //can_filter_modify
 var t = new Buffer.from(test_can_filter_modify.pack(mav));
   return [test_can_filter_modify,t]; // return an array of unpacked and packed options
};
exports.test_can_filter_modify = test_can_filter_modify; // expose in module

let test_wheel_distance = function () {
   if ( verbose == 2 ) console.log('test creating and packing:wheel_distance'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:wheel_distance          \r'); }
   var test_wheel_distance = new mavlink20.messages.wheel_distance(); 
      test_wheel_distance.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_wheel_distance.distance = [179.0, 180.0, 181.0, 182.0, 183.0, 184.0, 185.0, 186.0, 187.0, 188.0, 189.0, 190.0, 191.0, 192.0, 193.0, 194.0]; // fieldtype: double  isarray: True 
      test_wheel_distance.count = 157; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //wheel_distance
 var t = new Buffer.from(test_wheel_distance.pack(mav));
   return [test_wheel_distance,t]; // return an array of unpacked and packed options
};
exports.test_wheel_distance = test_wheel_distance; // expose in module

let test_winch_status = function () {
   if ( verbose == 2 ) console.log('test creating and packing:winch_status'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:winch_status          \r'); }
   var test_winch_status = new mavlink20.messages.winch_status(); 
      test_winch_status.time_usec = wrap_long(Long.fromString("93372036854775807", true)); // fieldtype: uint64_t  isarray: False 
      test_winch_status.line_length = 73.0; // fieldtype: float  isarray: False 
      test_winch_status.speed = 101.0; // fieldtype: float  isarray: False 
      test_winch_status.tension = 129.0; // fieldtype: float  isarray: False 
      test_winch_status.voltage = 157.0; // fieldtype: float  isarray: False 
      test_winch_status.current = 185.0; // fieldtype: float  isarray: False 
      test_winch_status.status = 963498920; // fieldtype: uint32_t  isarray: False 
      test_winch_status.temperature = (new Int16Array([18899]))[0]; // fieldtype: int16_t  isarray: False 
 //var t = new Buffer.from([])
; //winch_status
 var t = new Buffer.from(test_winch_status.pack(mav));
   return [test_winch_status,t]; // return an array of unpacked and packed options
};
exports.test_winch_status = test_winch_status; // expose in module

let test_open_drone_id_basic_id = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_basic_id'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_basic_id          \r'); }
   var test_open_drone_id_basic_id = new mavlink20.messages.open_drone_id_basic_id(); 
      test_open_drone_id_basic_id.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_basic_id.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_basic_id.id_or_mac = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_basic_id.id_type = 199; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_basic_id.ua_type = 10; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_basic_id.uas_id = new Buffer.from([77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //open_drone_id_basic_id
 var t = new Buffer.from(test_open_drone_id_basic_id.pack(mav));
   return [test_open_drone_id_basic_id,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_basic_id = test_open_drone_id_basic_id; // expose in module

let test_open_drone_id_location = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_location'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_location          \r'); }
   var test_open_drone_id_location = new mavlink20.messages.open_drone_id_location(); 
      test_open_drone_id_location.latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_open_drone_id_location.longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_open_drone_id_location.altitude_barometric = 73.0; // fieldtype: float  isarray: False 
      test_open_drone_id_location.altitude_geodetic = 101.0; // fieldtype: float  isarray: False 
      test_open_drone_id_location.height = 129.0; // fieldtype: float  isarray: False 
      test_open_drone_id_location.timestamp = 157.0; // fieldtype: float  isarray: False 
      test_open_drone_id_location.direction = 18483; // fieldtype: uint16_t  isarray: False 
      test_open_drone_id_location.speed_horizontal = 18587; // fieldtype: uint16_t  isarray: False 
      test_open_drone_id_location.speed_vertical = (new Int16Array([18691]))[0]; // fieldtype: int16_t  isarray: False 
      test_open_drone_id_location.target_system = 223; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.target_component = 34; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.id_or_mac = new Buffer.from([101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_location.status = 161; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.height_reference = 228; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.horizontal_accuracy = 39; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.vertical_accuracy = 106; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.barometer_accuracy = 173; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.speed_accuracy = 240; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_location.timestamp_accuracy = 51; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //open_drone_id_location
 var t = new Buffer.from(test_open_drone_id_location.pack(mav));
   return [test_open_drone_id_location,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_location = test_open_drone_id_location; // expose in module

let test_open_drone_id_authentication = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_authentication'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_authentication          \r'); }
   var test_open_drone_id_authentication = new mavlink20.messages.open_drone_id_authentication(); 
      test_open_drone_id_authentication.timestamp = 963497464; // fieldtype: uint32_t  isarray: False 
      test_open_drone_id_authentication.target_system = 17; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.target_component = 84; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.id_or_mac = new Buffer.from([151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_authentication.authentication_type = 211; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.data_page = 22; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.last_page_index = 89; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.length = 156; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_authentication.authentication_data = new Buffer.from([223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //open_drone_id_authentication
 var t = new Buffer.from(test_open_drone_id_authentication.pack(mav));
   return [test_open_drone_id_authentication,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_authentication = test_open_drone_id_authentication; // expose in module

let test_open_drone_id_self_id = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_self_id'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_self_id          \r'); }
   var test_open_drone_id_self_id = new mavlink20.messages.open_drone_id_self_id(); 
      test_open_drone_id_self_id.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_self_id.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_self_id.id_or_mac = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_self_id.description_type = 199; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_self_id.description = "XYZABCDEFGHIJKLMNOPQRS"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //open_drone_id_self_id
 var t = new Buffer.from(test_open_drone_id_self_id.pack(mav));
   return [test_open_drone_id_self_id,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_self_id = test_open_drone_id_self_id; // expose in module

let test_open_drone_id_system = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_system'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_system          \r'); }
   var test_open_drone_id_system = new mavlink20.messages.open_drone_id_system(); 
      test_open_drone_id_system.operator_latitude = (new Int32Array([963497464]))[0]; // fieldtype: int32_t  isarray: False 
      test_open_drone_id_system.operator_longitude = (new Int32Array([963497672]))[0]; // fieldtype: int32_t  isarray: False 
      test_open_drone_id_system.area_ceiling = 73.0; // fieldtype: float  isarray: False 
      test_open_drone_id_system.area_floor = 101.0; // fieldtype: float  isarray: False 
      test_open_drone_id_system.operator_altitude_geo = 129.0; // fieldtype: float  isarray: False 
      test_open_drone_id_system.timestamp = 963498504; // fieldtype: uint32_t  isarray: False 
      test_open_drone_id_system.area_count = 18483; // fieldtype: uint16_t  isarray: False 
      test_open_drone_id_system.area_radius = 18587; // fieldtype: uint16_t  isarray: False 
      test_open_drone_id_system.target_system = 89; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_system.target_component = 156; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_system.id_or_mac = new Buffer.from([223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_system.operator_location_type = 27; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_system.classification_type = 94; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_system.category_eu = 161; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_system.class_eu = 228; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //open_drone_id_system
 var t = new Buffer.from(test_open_drone_id_system.pack(mav));
   return [test_open_drone_id_system,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_system = test_open_drone_id_system; // expose in module

let test_open_drone_id_operator_id = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_operator_id'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_operator_id          \r'); }
   var test_open_drone_id_operator_id = new mavlink20.messages.open_drone_id_operator_id(); 
      test_open_drone_id_operator_id.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_operator_id.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_operator_id.id_or_mac = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_operator_id.operator_id_type = 199; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_operator_id.operator_id = "XYZABCDEFGHIJKLMNOP"; // fieldtype: char  isarray: False 
 //var t = new Buffer.from([])
; //open_drone_id_operator_id
 var t = new Buffer.from(test_open_drone_id_operator_id.pack(mav));
   return [test_open_drone_id_operator_id,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_operator_id = test_open_drone_id_operator_id; // expose in module

let test_open_drone_id_message_pack = function () {
   if ( verbose == 2 ) console.log('test creating and packing:open_drone_id_message_pack'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:open_drone_id_message_pack          \r'); }
   var test_open_drone_id_message_pack = new mavlink20.messages.open_drone_id_message_pack(); 
      test_open_drone_id_message_pack.target_system = 5; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_message_pack.target_component = 72; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_message_pack.id_or_mac = new Buffer.from([139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_open_drone_id_message_pack.single_message_size = 199; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_message_pack.msg_pack_size = 10; // fieldtype: uint8_t  isarray: False 
      test_open_drone_id_message_pack.messages = new Buffer.from([77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //open_drone_id_message_pack
 var t = new Buffer.from(test_open_drone_id_message_pack.pack(mav));
   return [test_open_drone_id_message_pack,t]; // return an array of unpacked and packed options
};
exports.test_open_drone_id_message_pack = test_open_drone_id_message_pack; // expose in module

let test_hygrometer_sensor = function () {
   if ( verbose == 2 ) console.log('test creating and packing:hygrometer_sensor'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:hygrometer_sensor          \r'); }
   var test_hygrometer_sensor = new mavlink20.messages.hygrometer_sensor(); 
      test_hygrometer_sensor.temperature = (new Int16Array([17235]))[0]; // fieldtype: int16_t  isarray: False 
      test_hygrometer_sensor.humidity = 17339; // fieldtype: uint16_t  isarray: False 
      test_hygrometer_sensor.id = 17; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //hygrometer_sensor
 var t = new Buffer.from(test_hygrometer_sensor.pack(mav));
   return [test_hygrometer_sensor,t]; // return an array of unpacked and packed options
};
exports.test_hygrometer_sensor = test_hygrometer_sensor; // expose in module

let test_heartbeat = function () {
   if ( verbose == 2 ) console.log('test creating and packing:heartbeat'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:heartbeat          \r'); }
   var test_heartbeat = new mavlink20.messages.heartbeat(); 
      test_heartbeat.custom_mode = 963497464; // fieldtype: uint32_t  isarray: False 
      test_heartbeat.type = 17; // fieldtype: uint8_t  isarray: False 
      test_heartbeat.autopilot = 84; // fieldtype: uint8_t  isarray: False 
      test_heartbeat.base_mode = 151; // fieldtype: uint8_t  isarray: False 
      test_heartbeat.system_status = 218; // fieldtype: uint8_t  isarray: False 
      test_heartbeat.mavlink_version = 3; // fieldtype: uint8_t  isarray: False 
 //var t = new Buffer.from([])
; //heartbeat
 var t = new Buffer.from(test_heartbeat.pack(mav));
   return [test_heartbeat,t]; // return an array of unpacked and packed options
};
exports.test_heartbeat = test_heartbeat; // expose in module

let test_protocol_version = function () {
   if ( verbose == 2 ) console.log('test creating and packing:protocol_version'); 
   if ( verbose == 1) { process.stdout.write('test creating and packing:protocol_version          \r'); }
   var test_protocol_version = new mavlink20.messages.protocol_version(); 
      test_protocol_version.version = 17235; // fieldtype: uint16_t  isarray: False 
      test_protocol_version.min_version = 17339; // fieldtype: uint16_t  isarray: False 
      test_protocol_version.max_version = 17443; // fieldtype: uint16_t  isarray: False 
      test_protocol_version.spec_version_hash = new Buffer.from([151, 152, 153, 154, 155, 156, 157, 158]).toString("binary"); // fieldtype: uint8_t  isarray: True 
      test_protocol_version.library_version_hash = new Buffer.from([175, 176, 177, 178, 179, 180, 181, 182]).toString("binary"); // fieldtype: uint8_t  isarray: True 
 //var t = new Buffer.from([])
; //protocol_version
 var t = new Buffer.from(test_protocol_version.pack(mav));
   return [test_protocol_version,t]; // return an array of unpacked and packed options
};
exports.test_protocol_version = test_protocol_version; // expose in module

mavlink20Tests = function(){ 
test_sys_status();
test_system_time();
test_ping();
test_change_operator_control();
test_change_operator_control_ack();
test_auth_key();
test_link_node_status();
test_set_mode();
test_param_request_read();
test_param_request_list();
test_param_value();
test_param_set();
test_gps_raw_int();
test_gps_status();
test_scaled_imu();
test_raw_imu();
test_raw_pressure();
test_scaled_pressure();
test_attitude();
test_attitude_quaternion();
test_local_position_ned();
test_global_position_int();
test_rc_channels_scaled();
test_rc_channels_raw();
test_servo_output_raw();
test_mission_request_partial_list();
test_mission_write_partial_list();
test_mission_item();
test_mission_request();
test_mission_set_current();
test_mission_current();
test_mission_request_list();
test_mission_count();
test_mission_clear_all();
test_mission_item_reached();
test_mission_ack();
test_set_gps_global_origin();
test_gps_global_origin();
test_param_map_rc();
test_mission_request_int();
test_safety_set_allowed_area();
test_safety_allowed_area();
test_attitude_quaternion_cov();
test_nav_controller_output();
test_global_position_int_cov();
test_local_position_ned_cov();
test_rc_channels();
test_request_data_stream();
test_data_stream();
test_manual_control();
test_rc_channels_override();
test_mission_item_int();
test_vfr_hud();
test_command_int();
test_command_long();
test_command_ack();
test_command_cancel();
test_manual_setpoint();
test_set_attitude_target();
test_attitude_target();
test_set_position_target_local_ned();
test_position_target_local_ned();
test_set_position_target_global_int();
test_position_target_global_int();
test_local_position_ned_system_global_offset();
test_hil_state();
test_hil_controls();
test_hil_rc_inputs_raw();
test_hil_actuator_controls();
test_optical_flow();
test_global_vision_position_estimate();
test_vision_position_estimate();
test_vision_speed_estimate();
test_vicon_position_estimate();
test_highres_imu();
test_optical_flow_rad();
test_hil_sensor();
test_sim_state();
test_radio_status();
test_file_transfer_protocol();
test_timesync();
test_camera_trigger();
test_hil_gps();
test_hil_optical_flow();
test_hil_state_quaternion();
test_scaled_imu2();
test_log_request_list();
test_log_entry();
test_log_request_data();
test_log_data();
test_log_erase();
test_log_request_end();
test_gps_inject_data();
test_gps2_raw();
test_power_status();
test_serial_control();
test_gps_rtk();
test_gps2_rtk();
test_scaled_imu3();
test_data_transmission_handshake();
test_encapsulated_data();
test_distance_sensor();
test_terrain_request();
test_terrain_data();
test_terrain_check();
test_terrain_report();
test_scaled_pressure2();
test_att_pos_mocap();
test_set_actuator_control_target();
test_actuator_control_target();
test_altitude();
test_resource_request();
test_scaled_pressure3();
test_follow_target();
test_control_system_state();
test_battery_status();
test_autopilot_version();
test_landing_target();
test_fence_status();
test_mag_cal_report();
test_efi_status();
test_estimator_status();
test_wind_cov();
test_gps_input();
test_gps_rtcm_data();
test_high_latency();
test_high_latency2();
test_vibration();
test_home_position();
test_set_home_position();
test_message_interval();
test_extended_sys_state();
test_adsb_vehicle();
test_collision();
test_v2_extension();
test_memory_vect();
test_debug_vect();
test_named_value_float();
test_named_value_int();
test_statustext();
test_debug();
test_setup_signing();
test_button_change();
test_play_tune();
test_camera_information();
test_camera_settings();
test_storage_information();
test_camera_capture_status();
test_camera_image_captured();
test_flight_information();
test_mount_orientation();
test_logging_data();
test_logging_data_acked();
test_logging_ack();
test_video_stream_information();
test_video_stream_status();
test_camera_fov_status();
test_camera_tracking_image_status();
test_camera_tracking_geo_status();
test_gimbal_manager_information();
test_gimbal_manager_status();
test_gimbal_manager_set_attitude();
test_gimbal_device_information();
test_gimbal_device_set_attitude();
test_gimbal_device_attitude_status();
test_autopilot_state_for_gimbal_device();
test_gimbal_manager_set_pitchyaw();
test_gimbal_manager_set_manual_control();
test_esc_info();
test_esc_status();
test_wifi_config_ap();
test_ais_vessel();
test_uavcan_node_status();
test_uavcan_node_info();
test_param_ext_request_read();
test_param_ext_request_list();
test_param_ext_value();
test_param_ext_set();
test_param_ext_ack();
test_obstacle_distance();
test_odometry();
test_trajectory_representation_waypoints();
test_trajectory_representation_bezier();
test_cellular_status();
test_isbd_link_status();
test_cellular_config();
test_raw_rpm();
test_utm_global_position();
test_debug_float_array();
test_orbit_execution_status();
test_smart_battery_info();
test_generator_status();
test_actuator_output_status();
test_time_estimate_to_target();
test_tunnel();
test_can_frame();
test_onboard_computer_status();
test_component_information();
test_component_metadata();
test_play_tune_v2();
test_supported_tunes();
test_event();
test_current_event_sequence();
test_request_event();
test_response_event_error();
test_canfd_frame();
test_can_filter_modify();
test_wheel_distance();
test_winch_status();
test_open_drone_id_basic_id();
test_open_drone_id_location();
test_open_drone_id_authentication();
test_open_drone_id_self_id();
test_open_drone_id_system();
test_open_drone_id_operator_id();
test_open_drone_id_message_pack();
test_hygrometer_sensor();
test_heartbeat();
test_protocol_version();
};

// if run as an app, run the tests immediately, but if run as a module don't, require user to call
if (require.main === module) {
   verbose=2;  // 0 is not verbose, 1 is a bit, 2 is more.
   mavlink20Tests();
} 


/* TESTs for MAVLink protocol handling class */
MAVLink20ProcessorTests = function() { mavlink20Tests(); }
exports.MAVLink20ProcessorTests = MAVLink20ProcessorTests; // expose in module

